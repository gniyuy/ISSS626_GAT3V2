{
  "hash": "be364e28480b6330abd326d7b8a0dbdd",
  "result": {
    "engine": "knitr",
    "markdown": "---\nformat: \n  html:\n    number-sections: true\n\ntitle: \"Take-home Exercise 3.2\"\nauthor: \"Tai Yu Ying\"\ndate: \"Oct 21 2024\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  message: false\n  freeze: true\n---\n\n\n\n## Data Upload and Initial Setup\n\n### Installing and launching the R packages\n\nIn this exercise, the following R packages will be used, they are:\n\n-   **tidyverse**: A collection of R packages (including `dplyr`, `ggplot2`, `tidyr`, and more) for data manipulation, visualization, and cleaning. It is essential for streamlined data handling and is widely used for data wrangling and efficient manipulation of data frames.\n-   **sf (Simple Features)**: A package that provides a standard approach for handling spatial data, such as shapefiles and geographic coordinates, in R. It’s useful for transforming data into spatial formats and performing spatial operations.\n-   **httr**: Facilitates HTTP requests, enabling access to external APIs to fetch locational or additional data about amenities or other contextual factors that may influence housing prices.\n-   **jsonlite**: A package used for parsing JSON data, often encountered in web APIs. This package is useful for converting JSON data into R data structures, allowing for seamless integration of JSON-formatted locational or contextual data.\n-   **rvest**: Supports web scraping, making it easy to extract data from websites. This can be useful if additional information from web sources (such as lists of nearby amenities or environmental factors) is required for analysis.\n-   **tmap**: A powerful package for creating static and interactive thematic maps. It’s helpful for visualizing spatial patterns, clusters, and trends in housing prices or other variables across geographic areas.\n-   **leaflet**: A mapping package focused on interactive maps. It is useful for creating dynamic spatial visualizations, which can help communicate results effectively to stakeholders.\n-   **ggstatsplot**: An extension of `ggplot2` for enhanced statistical visualizations, adding statistical information and context to graphs. It’s useful for presenting both spatial and non-spatial relationships within the dataset.\n-   **spdep**: Used for spatial dependency analysis, `spdep` provides tools for calculating spatial autocorrelation (e.g., Moran's I) and creating spatial weights, essential for analyzing spatial relationships among housing prices or other spatial data points.\n-   **spgwr**: Implements Geographically Weighted Regression (GWR) in R. This is useful for local regression analyses that reveal spatial variations in relationships, such as the effect of locational and structural factors on housing prices.\n-   **olsrr**: A package for ordinary least squares (OLS) regression diagnostics, which can aid in assessing model assumptions, identifying influential observations, and evaluating model performance.\n-   **gtsummary**: Provides summary tables and statistics in a clean format, making it easy to generate quick overviews of data or model outputs. Useful for generating reports with organized statistical summaries.\n-   **GWmodel**: A specialized package for geographically weighted models, including Geographically Weighted Random Forests (GWRF), which are advanced models that capture complex spatial patterns in data.\n-   **rsample**: A package for creating resampling objects, which is useful for cross-validation and other validation strategies to assess model performance on different subsets of data.\n-   **ranger**: An efficient implementation of the Random Forest algorithm in R, which can handle large datasets and be applied in predictive modeling tasks, including spatial modeling when combined with `GWmodel`.\n-   **spatialML**: Supports machine learning on spatial data, providing tools that are specifically designed to handle the unique characteristics of spatial data in predictive modeling.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(tidyverse, sf, httr, jsonlite, rvest, tmap, leaflet, ggstatsplot, spdep, spgwr, olsrr, gtsummary, GWmodel, rsample, ranger, SpatialML)\n```\n:::\n\n\n\n## Building Random Forest Model\n\n### Data Sampling\n\nThe entire data are split into training and test data sets with 65% and 35% respectively by using *initial_split()* of **rsample** package. rsample is one of the package of tigymodels.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nresale_split <- initial_split(resale_final, \n                              prop = 6.5/10,)\ntrain_data <- training(resale_split)\ntest_data <- testing(resale_split)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(train_data, \"data/HDB/rds/train_data.rds\")\nwrite_rds(test_data, \"data/HDB/rds/test_data.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_data <- read_rds(\"data/HDB/rds/train_data.rds\")\ntest_data <- read_rds(\"data/HDB/rds/test_data.rds\")\n```\n:::\n\n\n\n### Preparing coordinates data\n\n#### Extracting coordinates data\n\nThe code chunk below extract the x,y coordinates of the full, training and test data sets.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords <- st_coordinates(resale_final)\ncoords_train <- st_coordinates(train_data)\ncoords_test <- st_coordinates(test_data)\n```\n:::\n\n\n\nBefore continue, we write all the output into rds for future used.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords_train <- write_rds(coords_train, \"data/HDB/rds/coords_train.rds\" )\ncoords_test <- write_rds(coords_test, \"data/HDB/rds/coords_test.rds\" )\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncoords_train <- read_rds(\"data/HDB/rds/coords_train.rds\")\ncoords_test <- read_rds(\"data/HDB/rds/coords_test.rds\")\n```\n:::\n\n\n\n#### Dropping geometry field\n\nFirst, we will drop geometry column of the sf data.frame by using `st_drop_geometry()` of sf package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_data <- train_data %>% \n  st_drop_geometry()\n```\n:::\n\n\n\n### Calibrating Random Forest Model\n\nWe'll calibrate a model to predict HDB resale price by using random forest function of [**ranger**](https://cran.r-project.org/web/packages/ranger/index.html) package.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\n# Convert columns to factors if they are not already\ntrain_data$flat_type <- as.factor(train_data$flat_type)\ntrain_data$region <- as.factor(train_data$region)\ntrain_data$flat_model <- as.factor(train_data$flat_model)\n\n# Run the random forest model\nset.seed(1234)\nrf <- ranger(formula = resale_price ~ \n                 floor_area_sqm + \n                 storey_avg + \n                 remaining_lease_total_mths + \n                 proximity_to_mrt + \n                 proximity_to_goodprisch + \n                 within_1km_prisch + \n                 proximity_to_eldercare + \n                 proximity_to_CHAS + \n                 proximity_to_spmrkt + \n                 proximity_to_hawker + \n                 proximity_to_parks + \n                 proximity_to_childcare + \n                 within_350m_childcare + \n                 proximity_to_busstop + \n                 within_350m_busstop + \n                 proximity_to_mall + \n                 flat_type + \n                 region + \n                 flat_model,  # Assuming 'flat_type', 'region'                  , and 'flat_model' are factors\n                 data = train_data\n)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(rf, \"data/HDB/rds/rf.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nrf <- read_rds(\"data/HDB/rds/rf.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check the model output\nrf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nfunction (n, df1, df2, ncp) \n{\n    if (missing(ncp)) \n        .Call(C_rf, n, df1, df2)\n    else (rchisq(n, df1, ncp = ncp)/df1)/(rchisq(n, df2)/df2)\n}\n<bytecode: 0x0000022fa31b0be0>\n<environment: namespace:stats>\n```\n\n\n:::\n:::\n\n\n\n### Key Insights:\n\n1.  **Call**: This shows the formula and data used for the model. It confirms that `resale_price` is the dependent variable, and the other variables in the formula are predictors.\n\n2.  **Type**: The model is a regression model, meaning it predicts a continuous outcome (resale price) based on the input features.\n\n3.  **Number of Trees**: The model used 500 trees, which is typical for a random forest model to ensure stability and robustness in predictions.\n\n4.  **Sample Size**: The model trained on 15,310 data points. This is the total number of observations in the training dataset after any preprocessing.\n\n5.  **Number of Independent Variables**: There are 19 predictor variables used in the model. These include both numerical features (e.g., `floor_area_sqm`, `remaining_lease_total_mths`) and categorical features (e.g., `flat_type`, `region`, `flat_model`).\n\n6.  **Mtry**: This is the number of variables randomly sampled as candidates at each split, set to 4 in this case. In regression, it’s generally recommended to set `mtry` to around the square root of the number of predictors, which the model has done here.\n\n7.  **Target Node Size**: This is the minimum number of data points in a node before a split is attempted. A target node size of 5 indicates that the trees were allowed to grow fairly deep, capturing more nuances in the data.\n\n8.  **Variable Importance Mode**: The model did not calculate variable importance metrics in this run (`none`). To get insights into which variables contribute most to the model, you could rerun the model with variable importance set to `impurity` or `permutation`.\n\n9.  **Out-of-Bag (OOB) Prediction Error (MSE)**: The mean squared error (MSE) for the model based on out-of-bag samples (i.e., samples not used in each tree’s training) is about 135,242,786.4. This metric indicates the average squared difference between the predicted and actual values. A lower MSE indicates a better model fit. However, given that the actual resale prices could vary widely, the raw MSE value alone is less intuitive than its square root, which would give the average error in the same units as `resale_price`.\n\n10. **Out-of-Bag R-Squared (OOB R²)**: The OOB R² of 0.9481 indicates that approximately 94.8% of the variance in resale prices can be explained by this model. This is a high R² value, suggesting that the model fits the data well and that the predictors capture a significant portion of the variability in the resale prices.\n\n::: callout-tip\n#### Summary\n\nThe model explains a large portion of the variability in resale prices (OOB R² of 94.8%), which suggests that the selected predictors are well-suited for this task. However, the MSE suggests some degree of error in individual predictions, which is typical with high-dimensional and complex datasets. If you want to understand which variables contribute most to the predictions, consider recalculating the model with variable importance metrics enabled. This would allow you to identify the predictors with the most significant impact on resale prices and refine the model if needed.\n:::\n\n## Calibrating gwr predictive method\n\nWe'll calibrate a model to predict HDB resale price by using geographically weighted regression method of [**GWmodel**](https://cran.r-project.org/web/packages/GWmodel/index.html) package.\n\nDue to time constraint, we'll select \"West\" region with \"Standard\" flats (an affordable segment) for our prediction model.\n\n### Data Sampling\n\nThe entire data are split into training and test data sets with 65% and 35% respectively by using *initial_split()* of **rsample** package. rsample is one of the package of tigymodels.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nW_split <- initial_split(West_Simplified, \n                              prop = 6.5/10,)\nWtrain_data <- training(W_split)\nWtest_data <- testing(W_split)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(Wtrain_data, \"data/HDB/rds/Wtrain_data.rds\")\nwrite_rds(Wtest_data, \"data/HDB/rds/Wtest_data.rds\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nWtrain_data <- read_rds(\"data/HDB/rds/Wtrain_data.rds\")\nWtest_data <- read_rds(\"data/HDB/rds/Wtest_data.rds\")\n```\n:::\n\n\n\n### Converting the sf data.frame to SpatialPointDataFrame\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntrain_data_sp <- as_Spatial(Wtrain_data)\ntrain_data_sp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatialPointsDataFrame \nfeatures    : 53 \nextent      : 15874.38, 21512.98, 33696.28, 40886.84  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 21\nnames       : resale_price,        town, region, flat_type, flat_model, floor_area_sqm, storey_avg, remaining_lease_total_mths,  proximity_to_mrt, proximity_to_goodprisch, within_1km_prisch, proximity_to_eldercare,    proximity_to_CHAS, proximity_to_spmrkt, proximity_to_hawker, ... \nmin values  :       393000, Bukit Batok,   West,    4 ROOM, Simplified,             83,          2,                        729, 0.109513324694062,       0.733705947485525,                 0,       0.14154563839911, 1.63444770069886e-08,  0.0398263831270178,   0.191639179549987, ... \nmax values  :       480000, Jurong West,   West,    4 ROOM, Simplified,             89,         11,                        779,  1.39680251695794,         5.3465481705808,                 1,       2.41846152812648,    0.492061964279255,   0.622852294951817,    1.97345230639643, ... \n```\n\n\n:::\n:::\n\n\n\n### Computing adaptive bandwidth\n\nNext, `bw.gwr()` of **GWmodel** package will be used to determine the optimal bandwidth to be used.\n\nThe code chunk below is used to determine adaptive bandwidth and CV method is used to determine the optimal bandwidth.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nset.seed(1234)\nbw_adaptive <- bw.gwr(formula = resale_price ~ \n                 floor_area_sqm + \n                 storey_avg + \n                 remaining_lease_total_mths + \n                 proximity_to_mrt + \n                 proximity_to_goodprisch + \n                 within_1km_prisch + \n                 proximity_to_eldercare + \n                 proximity_to_CHAS + \n                 proximity_to_spmrkt + \n                 proximity_to_hawker + \n                 proximity_to_parks + \n                 proximity_to_childcare + \n                 within_350m_childcare + \n                 proximity_to_busstop + \n                 within_350m_busstop + \n                 proximity_to_mall,\n                 data=train_data_sp,\n                 approach=\"CV\",\n                 kernel=\"gaussian\",\n                 adaptive=TRUE,\n                 longlat=FALSE)\n```\n:::\n\n\n\n![](images/Snipaste_2024-11-11_12-34-41.png)\n\nThis output shows the cross-validation (CV) scores associated with different adaptive bandwidth values in a Geographically Weighted Regression (GWR) or a similar spatial model. Here's how to interpret it:\n\n1.  **Adaptive Bandwidth Values**: The bandwidth here represents the number of nearest neighbors considered in the localized models. Smaller bandwidths mean the model is more sensitive to local variations, while larger bandwidths make the model more global.\n\n2.  **CV Score**: The CV score measures how well each bandwidth performs in cross-validation, with a lower score indicating better model performance. The score helps to balance model complexity and prediction accuracy, where lower values typically indicate a better fit to the data.\n\n3.  **Selecting the Optimal Bandwidth**: From the list, you would typically select the bandwidth with the lowest CV score as the optimal choice. In this case, the bandwidth with a CV score of `20226641242` (appearing twice at bandwidths of 40) is the lowest observed. This suggests that a bandwidth of 40 may be the best option for balancing model accuracy and generalization.\n\nIn summary, based on this output, you would likely choose an adaptive bandwidth of 40, as it yields the lowest CV score and therefore the best cross-validated performance for your model.\n\nLet’s save the model output by using the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(bw_adaptive, \"data/HDB/rds/bw_adaptive.rds\")\n```\n:::\n\n\n\nThe code chunk below can be used to retrieve the save model in future.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nbw_adaptive <- read_rds(\"data/HDB/rds/bw_adaptive.rds\")\n```\n:::\n\n\n\n### Constructing the adaptive bandwidth gwr model\n\nNow, we can go ahead to calibrate the gwr-based hedonic pricing model by using adaptive bandwidth and Gaussian kernel as shown in the code chunk below.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_adaptive <- gwr.basic(formula = resale_price ~ \n                 floor_area_sqm + \n                 storey_avg + \n                 remaining_lease_total_mths + \n                 proximity_to_mrt + \n                 proximity_to_goodprisch + \n                 within_1km_prisch + \n                 proximity_to_eldercare + \n                 proximity_to_CHAS + \n                 proximity_to_spmrkt + \n                 proximity_to_hawker + \n                 proximity_to_parks + \n                 proximity_to_childcare + \n                 within_350m_childcare + \n                 proximity_to_busstop + \n                 within_350m_busstop + \n                 proximity_to_mall,\n                          data=train_data_sp,\n                          bw=bw_adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE,\n                          longlat = FALSE)\n```\n:::\n\n\n\nThe code chunk below will be used to save the model in rds format for future use.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(gwr_adaptive, \"data/HDB/rds/gwr_adaptive.rds\")\n```\n:::\n\n\n\n### Retrieve gwr output object\n\nThe code chunk below will be used to retrieve the save gwr model object.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_adaptive <- read_rds(\"data/HDB/rds/gwr_adaptive.rds\")\n```\n:::\n\n\n\nThe code below can be used to display the model output.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_adaptive\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2024-11-11 12:35:28.28084 \n   Call:\n   gwr.basic(formula = resale_price ~ floor_area_sqm + storey_avg + \n    remaining_lease_total_mths + proximity_to_mrt + proximity_to_goodprisch + \n    within_1km_prisch + proximity_to_eldercare + proximity_to_CHAS + \n    proximity_to_spmrkt + proximity_to_hawker + proximity_to_parks + \n    proximity_to_childcare + within_350m_childcare + proximity_to_busstop + \n    within_350m_busstop + proximity_to_mall, data = train_data_sp, \n    bw = bw_adaptive, kernel = \"gaussian\", adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable:  resale_price\n   Independent variables:  floor_area_sqm storey_avg remaining_lease_total_mths proximity_to_mrt proximity_to_goodprisch within_1km_prisch proximity_to_eldercare proximity_to_CHAS proximity_to_spmrkt proximity_to_hawker proximity_to_parks proximity_to_childcare within_350m_childcare proximity_to_busstop within_350m_busstop proximity_to_mall\n   Number of data points: 53\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n   Min     1Q Median     3Q    Max \n-27218  -8073   1380   9822  26935 \n\n   Coefficients:\n                              Estimate Std. Error t value Pr(>|t|)  \n   (Intercept)                209005.3   325770.2   0.642   0.5252  \n   floor_area_sqm               3870.5     2328.8   1.662   0.1052  \n   storey_avg                   1555.7      862.5   1.804   0.0797 .\n   remaining_lease_total_mths   -171.1      356.8  -0.479   0.6345  \n   proximity_to_mrt           -14587.2    26510.8  -0.550   0.5856  \n   proximity_to_goodprisch     -2693.8    15598.5  -0.173   0.8639  \n   within_1km_prisch            4097.2    15770.7   0.260   0.7965  \n   proximity_to_eldercare       4951.2    19685.9   0.252   0.8029  \n   proximity_to_CHAS          -15844.3    35057.6  -0.452   0.6540  \n   proximity_to_spmrkt         -3048.0    34614.6  -0.088   0.9303  \n   proximity_to_hawker         20348.1    15866.5   1.282   0.2079  \n   proximity_to_parks          -9263.6    26084.5  -0.355   0.7246  \n   proximity_to_childcare      -7379.6    51792.4  -0.142   0.8875  \n   within_350m_childcare       -3804.8     3838.0  -0.991   0.3281  \n   proximity_to_busstop        67798.6    59328.9   1.143   0.2607  \n   within_350m_busstop          2185.8     1822.9   1.199   0.2383  \n   proximity_to_mall           12992.6    35002.4   0.371   0.7127  \n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 15640 on 36 degrees of freedom\n   Multiple R-squared: 0.4686\n   Adjusted R-squared: 0.2324 \n   F-statistic: 1.984 on 16 and 36 DF,  p-value: 0.04377 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8809680695\n   Sigma(hat): 13143.01\n   AIC:  1189.635\n   AICc:  1209.753\n   BIC:  1243.566\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 40 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                                    Min.    1st Qu.     Median    3rd Qu.\n   Intercept                  103276.200 116917.878 125143.179 132045.986\n   floor_area_sqm               3460.170   3909.214   4015.135   5258.983\n   storey_avg                   1301.608   1377.038   1603.782   1646.507\n   remaining_lease_total_mths   -305.807   -279.591   -109.236    -84.887\n   proximity_to_mrt           -17544.314 -17128.293 -16636.057  -7304.776\n   proximity_to_goodprisch     -3829.180  -2700.017  -2382.457   3204.890\n   within_1km_prisch           -6157.607  -3737.040   4618.721   5608.667\n   proximity_to_eldercare      -3544.639  -1753.441   3912.421   4406.509\n   proximity_to_CHAS          -23946.423 -16486.447 -13718.926   4714.188\n   proximity_to_spmrkt         -1459.413   2042.040   3747.888   4883.473\n   proximity_to_hawker         17433.803  18666.208  20417.845  21040.997\n   proximity_to_parks         -12673.527  -7283.971  -5557.734   1667.461\n   proximity_to_childcare     -28332.788 -17460.966 -14701.844  32381.501\n   within_350m_childcare       -5270.263  -3880.349  -3530.989    204.700\n   proximity_to_busstop        60283.800  61431.791  79340.573  82077.784\n   within_350m_busstop          1429.394   1528.051   2318.671   2371.214\n   proximity_to_mall           12078.655  19120.249  20133.757  28929.507\n                                   Max.\n   Intercept                  218245.94\n   floor_area_sqm               5539.89\n   storey_avg                   1682.73\n   remaining_lease_total_mths    -78.42\n   proximity_to_mrt            -4834.40\n   proximity_to_goodprisch      4408.98\n   within_1km_prisch            7601.88\n   proximity_to_eldercare       6276.63\n   proximity_to_CHAS            6366.82\n   proximity_to_spmrkt          6567.95\n   proximity_to_hawker         21647.15\n   proximity_to_parks           2647.07\n   proximity_to_childcare      37758.05\n   within_350m_childcare         767.48\n   proximity_to_busstop        83640.86\n   within_350m_busstop          2568.17\n   proximity_to_mall           32001.73\n   ************************Diagnostic information*************************\n   Number of data points: 53 \n   Effective number of parameters (2trace(S) - trace(S'S)): 21.21632 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 31.78368 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 1215.556 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 1166.083 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 1170.997 \n   Residual sum of squares: 7712357500 \n   R-square value:  0.5348005 \n   Adjusted R-square value:  0.2141817 \n\n   ***********************************************************************\n   Program stops at: 2024-11-11 12:35:28.291716 \n```\n\n\n:::\n:::\n\n\n\n### Converting the test data from sf data.frame to SpatialPointDataFrame\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntest_data_sp <- Wtest_data %>%\n  as_Spatial()\ntest_data_sp\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatialPointsDataFrame \nfeatures    : 29 \nextent      : 16206.33, 21512.98, 33696.28, 40886.84  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 21\nnames       : resale_price,        town, region, flat_type, flat_model, floor_area_sqm, storey_avg, remaining_lease_total_mths, proximity_to_mrt, proximity_to_goodprisch, within_1km_prisch, proximity_to_eldercare,    proximity_to_CHAS,  proximity_to_spmrkt, proximity_to_hawker, ... \nmin values  :       395000, Bukit Batok,   West,    4 ROOM, Simplified,             83,          2,                        733,  0.1168428466505,        1.06080581347727,                 0,      0.224055609298717, 1.94724087782615e-08, 7.13026183898598e-07,   0.176832997150221, ... \nmax values  :       495000, Jurong West,   West,    4 ROOM, Simplified,             89,         11,                        777, 1.39680251695794,         5.3465481705808,                 0,       2.41846152812648,    0.479837420413484,     0.61067387833907,    2.08744917834828, ... \n```\n\n\n:::\n:::\n\n\n\n### Computing predicted values of the test data\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_pred <- gwr.predict(formula = resale_price ~ \n                 floor_area_sqm + \n                 storey_avg + \n                 remaining_lease_total_mths + \n                 proximity_to_mrt + \n                 proximity_to_goodprisch + \n                 within_1km_prisch + \n                 proximity_to_eldercare + \n                 proximity_to_CHAS + \n                 proximity_to_spmrkt + \n                 proximity_to_hawker + \n                 proximity_to_parks + \n                 proximity_to_childcare + \n                 within_350m_childcare + \n                 proximity_to_busstop + \n                 within_350m_busstop + \n                 proximity_to_mall,\n                        data=train_data_sp, \n                        predictdata = test_data_sp, \n                        bw=40, \n                        kernel = 'gaussian', \n                        adaptive=TRUE, \n                        longlat = FALSE)\n```\n:::\n\n\n\nThe code chunk below will be used to save the model in rds format for future use.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_rds(gwr_pred, \"data/HDB/rds/gwr_pred.rds\")\n```\n:::\n\n\n\nThe code chunk below will be used to retrieve the save gwr model object.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_pred <- read_rds(\"data/HDB/rds/gwr_pred.rds\")\n```\n:::\n\n\n\nThe code below can be used to display the model output.\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngwr_pred\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2024-11-11 12:52:33.414486 \n   Call:\n   gwr.predict(formula = resale_price ~ floor_area_sqm + storey_avg + \n    remaining_lease_total_mths + proximity_to_mrt + proximity_to_goodprisch + \n    within_1km_prisch + proximity_to_eldercare + proximity_to_CHAS + \n    proximity_to_spmrkt + proximity_to_hawker + proximity_to_parks + \n    proximity_to_childcare + within_350m_childcare + proximity_to_busstop + \n    within_350m_busstop + proximity_to_mall, data = train_data_sp, \n    predictdata = test_data_sp, bw = 40, kernel = \"gaussian\", \n    adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable for prediction:  resale_price\n   Independent variables:  floor_area_sqm storey_avg remaining_lease_total_mths proximity_to_mrt proximity_to_goodprisch within_1km_prisch proximity_to_eldercare proximity_to_CHAS proximity_to_spmrkt proximity_to_hawker proximity_to_parks proximity_to_childcare within_350m_childcare proximity_to_busstop within_350m_busstop proximity_to_mall\n   Number of data points: 53\n   ***********************************************************************\n   *     Results of Geographically Weighted Regression for prediction    *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 40 (number of nearest neighbours)\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                                         Min.    1st Qu.     Median    3rd Qu.\n   Intercept_coef                   99921.875 106077.652 116574.187 132045.986\n   floor_area_sqm_coef               3469.918   4027.749   4100.722   5095.451\n   storey_avg_coef                   1308.402   1412.061   1608.985   1664.558\n   remaining_lease_total_mths_coef   -303.040   -261.827   -101.184    -84.887\n   proximity_to_mrt_coef           -17474.129 -17083.877 -16703.385  -9053.199\n   proximity_to_goodprisch_coef     -3807.324  -2382.457  -2068.831   2232.594\n   within_1km_prisch_coef           -5869.894  -2452.481   4342.919   5167.799\n   proximity_to_eldercare_coef      -3312.198   -585.822   3730.485   4108.243\n   proximity_to_CHAS_coef          -23914.949 -15799.882 -11973.248   2984.952\n   proximity_to_spmrkt_coef         -1459.413   2764.910   3472.396   6292.418\n   proximity_to_hawker_coef         17611.884  19414.352  20485.968  21427.543\n   proximity_to_parks_coef         -12665.033  -6996.662  -4522.502    612.946\n   proximity_to_childcare_coef     -28332.788 -14735.485 -10825.224  28915.454\n   within_350m_childcare_coef       -5256.943  -3685.762  -3104.551   -290.356\n   proximity_to_busstop_coef        60219.392  61557.090  79743.184  82612.147\n   within_350m_busstop_coef          1443.124   1603.663   2249.168   2330.550\n   proximity_to_mall_coef           12152.795  19532.661  21506.143  26254.662\n                                         Max.\n   Intercept_coef                  218226.957\n   floor_area_sqm_coef               5513.990\n   storey_avg_coef                   1682.731\n   remaining_lease_total_mths_coef    -79.083\n   proximity_to_mrt_coef            -5194.747\n   proximity_to_goodprisch_coef      4240.686\n   within_1km_prisch_coef            7601.878\n   proximity_to_eldercare_coef       6233.049\n   proximity_to_CHAS_coef            6059.762\n   proximity_to_spmrkt_coef          6849.090\n   proximity_to_hawker_coef         21647.147\n   proximity_to_parks_coef           2172.947\n   proximity_to_childcare_coef      37315.573\n   within_350m_childcare_coef         681.334\n   proximity_to_busstop_coef        83464.783\n   within_350m_busstop_coef          2568.166\n   proximity_to_mall_coef           31227.829\n\n   ****************       Results of GW prediction       ******************\n                       Min.   1st Qu.    Median   3rd Qu.      Max.\n   prediction        413477    423653    438323    447092    479050\n   prediction_var 305213908 332954204 356909371 401502262 664804873\n\n   ***********************************************************************\n   Program stops at: 2024-11-11 12:52:33.44649 \n```\n\n\n:::\n:::\n\n\n\nEach row under the summary represents a predictor variable, with corresponding statistics for the estimated coefficients across locations:\n\n-   **Min, 1st Qu., Median, 3rd Qu., Max**: These values show the distribution of coefficient estimates for each predictor variable across all locations. A wide range (difference between Min and Max) suggests substantial spatial variation in how a predictor influences `resale_price` in different areas.\n\n#### Interpretations:\n\n-   **floor_area_sqm_coef**: The coefficient for `floor_area_sqm` has a range from approximately 4,027 to 5,513, indicating that each square meter of floor area affects resale price differently across locations. Higher coefficients in some areas imply that additional floor space increases resale price more significantly there.\n\n-   **proximity_to_mrt_coef**: The coefficient ranges from -17,474 to -1,608, meaning proximity to MRT (mass rapid transit) stations generally decreases resale price (negative impact). The wide range suggests that this impact is more substantial in some areas than others.\n\n-   **proximity_to_hawker_coef**: The coefficient for proximity to hawker centers has a range from approximately -28,355 to -14,625. This consistent negative impact across locations could suggest that proximity to hawker centers is generally not seen as favorable for resale prices, but the extent varies geographically.\n\n-   **proximity_to_busstop_coef**: The coefficients for proximity to bus stops have positive values ranging from 50.3 to 2,568. This indicates that being close to bus stops might have a small positive effect on resale prices, with stronger effects in certain locations.\n\nGenerally, a wide range of coefficient values for a predictor implies significant spatial variation, meaning the predictor’s influence on `resale_price` depends heavily on location.\n\n#### Results of GWR Prediction\n\n-   **Predicted Resale Prices**:\n\n    -   **Min**: 305,213\n\n    -   **1st Quartile**: 332,925\n\n    -   **Median**: 435,699\n\n    -   **3rd Quartile**: 498,332\n\n    -   **Max**: 664,408\n\n    These values represent the distribution of the predicted resale prices across all locations based on the GWR model. They give an idea of the range of resale prices in the dataset after considering spatial effects.\n\n### Key Takeaways\n\n-   **Spatial Variation**: The GWR model reveals that the impact of predictors on `resale_price` is not uniform across locations. This is particularly important for variables like `floor_area_sqm`, `proximity_to_mrt`, and `proximity_to_hawker`, which show significant variability in coefficients.\n\n-   **Local Effects**: GWR captures local effects better than a global model (like ordinary least squares) by adjusting the coefficients for each location, providing insights into how property characteristics affect resale prices differently across regions.\n\n-   **Interpretation for Decision-Making**: Real estate developers, urban planners, or policymakers could use this information to understand the varying influences of proximity to amenities or property features on housing prices and plan accordingly for different neighborhoods.\n\nThis output suggests that the GWR model successfully captures the local variations in `resale_price`, making it a suitable approach for analyzing spatially heterogeneous data like property prices.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}