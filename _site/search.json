[
  {
    "objectID": "Take-home_Ex03/Take-homeExercise3.2.html",
    "href": "Take-home_Ex03/Take-homeExercise3.2.html",
    "title": "Take-home Exercise 3.2",
    "section": "",
    "text": "In this exercise, the following R packages will be used, they are:\n\ntidyverse: A collection of R packages (including dplyr, ggplot2, tidyr, and more) for data manipulation, visualization, and cleaning. It is essential for streamlined data handling and is widely used for data wrangling and efficient manipulation of data frames.\nsf (Simple Features): A package that provides a standard approach for handling spatial data, such as shapefiles and geographic coordinates, in R. It’s useful for transforming data into spatial formats and performing spatial operations.\nhttr: Facilitates HTTP requests, enabling access to external APIs to fetch locational or additional data about amenities or other contextual factors that may influence housing prices.\njsonlite: A package used for parsing JSON data, often encountered in web APIs. This package is useful for converting JSON data into R data structures, allowing for seamless integration of JSON-formatted locational or contextual data.\nrvest: Supports web scraping, making it easy to extract data from websites. This can be useful if additional information from web sources (such as lists of nearby amenities or environmental factors) is required for analysis.\ntmap: A powerful package for creating static and interactive thematic maps. It’s helpful for visualizing spatial patterns, clusters, and trends in housing prices or other variables across geographic areas.\nleaflet: A mapping package focused on interactive maps. It is useful for creating dynamic spatial visualizations, which can help communicate results effectively to stakeholders.\nggstatsplot: An extension of ggplot2 for enhanced statistical visualizations, adding statistical information and context to graphs. It’s useful for presenting both spatial and non-spatial relationships within the dataset.\nspdep: Used for spatial dependency analysis, spdep provides tools for calculating spatial autocorrelation (e.g., Moran’s I) and creating spatial weights, essential for analyzing spatial relationships among housing prices or other spatial data points.\nspgwr: Implements Geographically Weighted Regression (GWR) in R. This is useful for local regression analyses that reveal spatial variations in relationships, such as the effect of locational and structural factors on housing prices.\nolsrr: A package for ordinary least squares (OLS) regression diagnostics, which can aid in assessing model assumptions, identifying influential observations, and evaluating model performance.\ngtsummary: Provides summary tables and statistics in a clean format, making it easy to generate quick overviews of data or model outputs. Useful for generating reports with organized statistical summaries.\nGWmodel: A specialized package for geographically weighted models, including Geographically Weighted Random Forests (GWRF), which are advanced models that capture complex spatial patterns in data.\nrsample: A package for creating resampling objects, which is useful for cross-validation and other validation strategies to assess model performance on different subsets of data.\nranger: An efficient implementation of the Random Forest algorithm in R, which can handle large datasets and be applied in predictive modeling tasks, including spatial modeling when combined with GWmodel.\nspatialML: Supports machine learning on spatial data, providing tools that are specifically designed to handle the unique characteristics of spatial data in predictive modeling.\n\n\npacman::p_load(tidyverse, sf, httr, jsonlite, rvest, tmap, leaflet, ggstatsplot, spdep, spgwr, olsrr, gtsummary, GWmodel, rsample, ranger, SpatialML)"
  },
  {
    "objectID": "Take-home_Ex03/Take-homeExercise3.2.html#data-upload-and-initial-setup",
    "href": "Take-home_Ex03/Take-homeExercise3.2.html#data-upload-and-initial-setup",
    "title": "Take-home Exercise 3.2",
    "section": "",
    "text": "In this exercise, the following R packages will be used, they are:\n\ntidyverse: A collection of R packages (including dplyr, ggplot2, tidyr, and more) for data manipulation, visualization, and cleaning. It is essential for streamlined data handling and is widely used for data wrangling and efficient manipulation of data frames.\nsf (Simple Features): A package that provides a standard approach for handling spatial data, such as shapefiles and geographic coordinates, in R. It’s useful for transforming data into spatial formats and performing spatial operations.\nhttr: Facilitates HTTP requests, enabling access to external APIs to fetch locational or additional data about amenities or other contextual factors that may influence housing prices.\njsonlite: A package used for parsing JSON data, often encountered in web APIs. This package is useful for converting JSON data into R data structures, allowing for seamless integration of JSON-formatted locational or contextual data.\nrvest: Supports web scraping, making it easy to extract data from websites. This can be useful if additional information from web sources (such as lists of nearby amenities or environmental factors) is required for analysis.\ntmap: A powerful package for creating static and interactive thematic maps. It’s helpful for visualizing spatial patterns, clusters, and trends in housing prices or other variables across geographic areas.\nleaflet: A mapping package focused on interactive maps. It is useful for creating dynamic spatial visualizations, which can help communicate results effectively to stakeholders.\nggstatsplot: An extension of ggplot2 for enhanced statistical visualizations, adding statistical information and context to graphs. It’s useful for presenting both spatial and non-spatial relationships within the dataset.\nspdep: Used for spatial dependency analysis, spdep provides tools for calculating spatial autocorrelation (e.g., Moran’s I) and creating spatial weights, essential for analyzing spatial relationships among housing prices or other spatial data points.\nspgwr: Implements Geographically Weighted Regression (GWR) in R. This is useful for local regression analyses that reveal spatial variations in relationships, such as the effect of locational and structural factors on housing prices.\nolsrr: A package for ordinary least squares (OLS) regression diagnostics, which can aid in assessing model assumptions, identifying influential observations, and evaluating model performance.\ngtsummary: Provides summary tables and statistics in a clean format, making it easy to generate quick overviews of data or model outputs. Useful for generating reports with organized statistical summaries.\nGWmodel: A specialized package for geographically weighted models, including Geographically Weighted Random Forests (GWRF), which are advanced models that capture complex spatial patterns in data.\nrsample: A package for creating resampling objects, which is useful for cross-validation and other validation strategies to assess model performance on different subsets of data.\nranger: An efficient implementation of the Random Forest algorithm in R, which can handle large datasets and be applied in predictive modeling tasks, including spatial modeling when combined with GWmodel.\nspatialML: Supports machine learning on spatial data, providing tools that are specifically designed to handle the unique characteristics of spatial data in predictive modeling.\n\n\npacman::p_load(tidyverse, sf, httr, jsonlite, rvest, tmap, leaflet, ggstatsplot, spdep, spgwr, olsrr, gtsummary, GWmodel, rsample, ranger, SpatialML)"
  },
  {
    "objectID": "Take-home_Ex03/Take-homeExercise3.2.html#building-random-forest-model",
    "href": "Take-home_Ex03/Take-homeExercise3.2.html#building-random-forest-model",
    "title": "Take-home Exercise 3.2",
    "section": "2 Building Random Forest Model",
    "text": "2 Building Random Forest Model\n\n2.1 Data Sampling\nThe entire data are split into training and test data sets with 65% and 35% respectively by using initial_split() of rsample package. rsample is one of the package of tigymodels.\n\nset.seed(1234)\nresale_split &lt;- initial_split(resale_final, \n                              prop = 6.5/10,)\ntrain_data &lt;- training(resale_split)\ntest_data &lt;- testing(resale_split)\n\n\nwrite_rds(train_data, \"data/HDB/rds/train_data.rds\")\nwrite_rds(test_data, \"data/HDB/rds/test_data.rds\")\n\n\ntrain_data &lt;- read_rds(\"data/HDB/rds/train_data.rds\")\ntest_data &lt;- read_rds(\"data/HDB/rds/test_data.rds\")\n\n\n\n2.2 Preparing coordinates data\n\n2.2.1 Extracting coordinates data\nThe code chunk below extract the x,y coordinates of the full, training and test data sets.\n\ncoords &lt;- st_coordinates(resale_final)\ncoords_train &lt;- st_coordinates(train_data)\ncoords_test &lt;- st_coordinates(test_data)\n\nBefore continue, we write all the output into rds for future used.\n\ncoords_train &lt;- write_rds(coords_train, \"data/HDB/rds/coords_train.rds\" )\ncoords_test &lt;- write_rds(coords_test, \"data/HDB/rds/coords_test.rds\" )\n\n\ncoords_train &lt;- read_rds(\"data/HDB/rds/coords_train.rds\")\ncoords_test &lt;- read_rds(\"data/HDB/rds/coords_test.rds\")\n\n\n\n2.2.2 Dropping geometry field\nFirst, we will drop geometry column of the sf data.frame by using st_drop_geometry() of sf package.\n\ntrain_data &lt;- train_data %&gt;% \n  st_drop_geometry()\n\n\n\n\n2.3 Calibrating Random Forest Model\nWe’ll calibrate a model to predict HDB resale price by using random forest function of ranger package.\n\nset.seed(1234)\n# Convert columns to factors if they are not already\ntrain_data$flat_type &lt;- as.factor(train_data$flat_type)\ntrain_data$region &lt;- as.factor(train_data$region)\ntrain_data$flat_model &lt;- as.factor(train_data$flat_model)\n\n# Run the random forest model\nset.seed(1234)\nrf &lt;- ranger(formula = resale_price ~ \n                 floor_area_sqm + \n                 storey_avg + \n                 remaining_lease_total_mths + \n                 proximity_to_mrt + \n                 proximity_to_goodprisch + \n                 within_1km_prisch + \n                 proximity_to_eldercare + \n                 proximity_to_CHAS + \n                 proximity_to_spmrkt + \n                 proximity_to_hawker + \n                 proximity_to_parks + \n                 proximity_to_childcare + \n                 within_350m_childcare + \n                 proximity_to_busstop + \n                 within_350m_busstop + \n                 proximity_to_mall + \n                 flat_type + \n                 region + \n                 flat_model,  # Assuming 'flat_type', 'region'                  , and 'flat_model' are factors\n                 data = train_data\n)\n\n\nwrite_rds(rf, \"data/HDB/rds/rf.rds\")\n\n\nrf &lt;- read_rds(\"data/HDB/rds/rf.rds\")\n\n\n# Check the model output\nrf\n\nfunction (n, df1, df2, ncp) \n{\n    if (missing(ncp)) \n        .Call(C_rf, n, df1, df2)\n    else (rchisq(n, df1, ncp = ncp)/df1)/(rchisq(n, df2)/df2)\n}\n&lt;bytecode: 0x0000022fa31b0be0&gt;\n&lt;environment: namespace:stats&gt;\n\n\n\n\n2.4 Key Insights:\n\nCall: This shows the formula and data used for the model. It confirms that resale_price is the dependent variable, and the other variables in the formula are predictors.\nType: The model is a regression model, meaning it predicts a continuous outcome (resale price) based on the input features.\nNumber of Trees: The model used 500 trees, which is typical for a random forest model to ensure stability and robustness in predictions.\nSample Size: The model trained on 15,310 data points. This is the total number of observations in the training dataset after any preprocessing.\nNumber of Independent Variables: There are 19 predictor variables used in the model. These include both numerical features (e.g., floor_area_sqm, remaining_lease_total_mths) and categorical features (e.g., flat_type, region, flat_model).\nMtry: This is the number of variables randomly sampled as candidates at each split, set to 4 in this case. In regression, it’s generally recommended to set mtry to around the square root of the number of predictors, which the model has done here.\nTarget Node Size: This is the minimum number of data points in a node before a split is attempted. A target node size of 5 indicates that the trees were allowed to grow fairly deep, capturing more nuances in the data.\nVariable Importance Mode: The model did not calculate variable importance metrics in this run (none). To get insights into which variables contribute most to the model, you could rerun the model with variable importance set to impurity or permutation.\nOut-of-Bag (OOB) Prediction Error (MSE): The mean squared error (MSE) for the model based on out-of-bag samples (i.e., samples not used in each tree’s training) is about 135,242,786.4. This metric indicates the average squared difference between the predicted and actual values. A lower MSE indicates a better model fit. However, given that the actual resale prices could vary widely, the raw MSE value alone is less intuitive than its square root, which would give the average error in the same units as resale_price.\nOut-of-Bag R-Squared (OOB R²): The OOB R² of 0.9481 indicates that approximately 94.8% of the variance in resale prices can be explained by this model. This is a high R² value, suggesting that the model fits the data well and that the predictors capture a significant portion of the variability in the resale prices.\n\n\n\n\n\n\n\nSummary\n\n\n\nThe model explains a large portion of the variability in resale prices (OOB R² of 94.8%), which suggests that the selected predictors are well-suited for this task. However, the MSE suggests some degree of error in individual predictions, which is typical with high-dimensional and complex datasets. If you want to understand which variables contribute most to the predictions, consider recalculating the model with variable importance metrics enabled. This would allow you to identify the predictors with the most significant impact on resale prices and refine the model if needed."
  },
  {
    "objectID": "Take-home_Ex03/Take-homeExercise3.2.html#calibrating-gwr-predictive-method",
    "href": "Take-home_Ex03/Take-homeExercise3.2.html#calibrating-gwr-predictive-method",
    "title": "Take-home Exercise 3.2",
    "section": "3 Calibrating gwr predictive method",
    "text": "3 Calibrating gwr predictive method\nWe’ll calibrate a model to predict HDB resale price by using geographically weighted regression method of GWmodel package.\nDue to time constraint, we’ll select “West” region with “Standard” flats (an affordable segment) for our prediction model.\n\n3.1 Data Sampling\nThe entire data are split into training and test data sets with 65% and 35% respectively by using initial_split() of rsample package. rsample is one of the package of tigymodels.\n\nset.seed(1234)\nW_split &lt;- initial_split(West_Simplified, \n                              prop = 6.5/10,)\nWtrain_data &lt;- training(W_split)\nWtest_data &lt;- testing(W_split)\n\n\nwrite_rds(Wtrain_data, \"data/HDB/rds/Wtrain_data.rds\")\nwrite_rds(Wtest_data, \"data/HDB/rds/Wtest_data.rds\")\n\n\nWtrain_data &lt;- read_rds(\"data/HDB/rds/Wtrain_data.rds\")\nWtest_data &lt;- read_rds(\"data/HDB/rds/Wtest_data.rds\")\n\n\n\n3.2 Converting the sf data.frame to SpatialPointDataFrame\n\ntrain_data_sp &lt;- as_Spatial(Wtrain_data)\ntrain_data_sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 53 \nextent      : 15874.38, 21512.98, 33696.28, 40886.84  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 21\nnames       : resale_price,        town, region, flat_type, flat_model, floor_area_sqm, storey_avg, remaining_lease_total_mths,  proximity_to_mrt, proximity_to_goodprisch, within_1km_prisch, proximity_to_eldercare,    proximity_to_CHAS, proximity_to_spmrkt, proximity_to_hawker, ... \nmin values  :       393000, Bukit Batok,   West,    4 ROOM, Simplified,             83,          2,                        729, 0.109513324694062,       0.733705947485525,                 0,       0.14154563839911, 1.63444770069886e-08,  0.0398263831270178,   0.191639179549987, ... \nmax values  :       480000, Jurong West,   West,    4 ROOM, Simplified,             89,         11,                        779,  1.39680251695794,         5.3465481705808,                 1,       2.41846152812648,    0.492061964279255,   0.622852294951817,    1.97345230639643, ... \n\n\n\n\n3.3 Computing adaptive bandwidth\nNext, bw.gwr() of GWmodel package will be used to determine the optimal bandwidth to be used.\nThe code chunk below is used to determine adaptive bandwidth and CV method is used to determine the optimal bandwidth.\n\nset.seed(1234)\nbw_adaptive &lt;- bw.gwr(formula = resale_price ~ \n                 floor_area_sqm + \n                 storey_avg + \n                 remaining_lease_total_mths + \n                 proximity_to_mrt + \n                 proximity_to_goodprisch + \n                 within_1km_prisch + \n                 proximity_to_eldercare + \n                 proximity_to_CHAS + \n                 proximity_to_spmrkt + \n                 proximity_to_hawker + \n                 proximity_to_parks + \n                 proximity_to_childcare + \n                 within_350m_childcare + \n                 proximity_to_busstop + \n                 within_350m_busstop + \n                 proximity_to_mall,\n                 data=train_data_sp,\n                 approach=\"CV\",\n                 kernel=\"gaussian\",\n                 adaptive=TRUE,\n                 longlat=FALSE)\n\n\nThis output shows the cross-validation (CV) scores associated with different adaptive bandwidth values in a Geographically Weighted Regression (GWR) or a similar spatial model. Here’s how to interpret it:\n\nAdaptive Bandwidth Values: The bandwidth here represents the number of nearest neighbors considered in the localized models. Smaller bandwidths mean the model is more sensitive to local variations, while larger bandwidths make the model more global.\nCV Score: The CV score measures how well each bandwidth performs in cross-validation, with a lower score indicating better model performance. The score helps to balance model complexity and prediction accuracy, where lower values typically indicate a better fit to the data.\nSelecting the Optimal Bandwidth: From the list, you would typically select the bandwidth with the lowest CV score as the optimal choice. In this case, the bandwidth with a CV score of 20226641242 (appearing twice at bandwidths of 40) is the lowest observed. This suggests that a bandwidth of 40 may be the best option for balancing model accuracy and generalization.\n\nIn summary, based on this output, you would likely choose an adaptive bandwidth of 40, as it yields the lowest CV score and therefore the best cross-validated performance for your model.\nLet’s save the model output by using the code chunk below.\n\nwrite_rds(bw_adaptive, \"data/HDB/rds/bw_adaptive.rds\")\n\nThe code chunk below can be used to retrieve the save model in future.\n\nbw_adaptive &lt;- read_rds(\"data/HDB/rds/bw_adaptive.rds\")\n\n\n\n3.4 Constructing the adaptive bandwidth gwr model\nNow, we can go ahead to calibrate the gwr-based hedonic pricing model by using adaptive bandwidth and Gaussian kernel as shown in the code chunk below.\n\ngwr_adaptive &lt;- gwr.basic(formula = resale_price ~ \n                 floor_area_sqm + \n                 storey_avg + \n                 remaining_lease_total_mths + \n                 proximity_to_mrt + \n                 proximity_to_goodprisch + \n                 within_1km_prisch + \n                 proximity_to_eldercare + \n                 proximity_to_CHAS + \n                 proximity_to_spmrkt + \n                 proximity_to_hawker + \n                 proximity_to_parks + \n                 proximity_to_childcare + \n                 within_350m_childcare + \n                 proximity_to_busstop + \n                 within_350m_busstop + \n                 proximity_to_mall,\n                          data=train_data_sp,\n                          bw=bw_adaptive, \n                          kernel = 'gaussian', \n                          adaptive=TRUE,\n                          longlat = FALSE)\n\nThe code chunk below will be used to save the model in rds format for future use.\n\nwrite_rds(gwr_adaptive, \"data/HDB/rds/gwr_adaptive.rds\")\n\n\n\n3.5 Retrieve gwr output object\nThe code chunk below will be used to retrieve the save gwr model object.\n\ngwr_adaptive &lt;- read_rds(\"data/HDB/rds/gwr_adaptive.rds\")\n\nThe code below can be used to display the model output.\n\ngwr_adaptive\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2024-11-11 12:35:28.28084 \n   Call:\n   gwr.basic(formula = resale_price ~ floor_area_sqm + storey_avg + \n    remaining_lease_total_mths + proximity_to_mrt + proximity_to_goodprisch + \n    within_1km_prisch + proximity_to_eldercare + proximity_to_CHAS + \n    proximity_to_spmrkt + proximity_to_hawker + proximity_to_parks + \n    proximity_to_childcare + within_350m_childcare + proximity_to_busstop + \n    within_350m_busstop + proximity_to_mall, data = train_data_sp, \n    bw = bw_adaptive, kernel = \"gaussian\", adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable:  resale_price\n   Independent variables:  floor_area_sqm storey_avg remaining_lease_total_mths proximity_to_mrt proximity_to_goodprisch within_1km_prisch proximity_to_eldercare proximity_to_CHAS proximity_to_spmrkt proximity_to_hawker proximity_to_parks proximity_to_childcare within_350m_childcare proximity_to_busstop within_350m_busstop proximity_to_mall\n   Number of data points: 53\n   ***********************************************************************\n   *                    Results of Global Regression                     *\n   ***********************************************************************\n\n   Call:\n    lm(formula = formula, data = data)\n\n   Residuals:\n   Min     1Q Median     3Q    Max \n-27218  -8073   1380   9822  26935 \n\n   Coefficients:\n                              Estimate Std. Error t value Pr(&gt;|t|)  \n   (Intercept)                209005.3   325770.2   0.642   0.5252  \n   floor_area_sqm               3870.5     2328.8   1.662   0.1052  \n   storey_avg                   1555.7      862.5   1.804   0.0797 .\n   remaining_lease_total_mths   -171.1      356.8  -0.479   0.6345  \n   proximity_to_mrt           -14587.2    26510.8  -0.550   0.5856  \n   proximity_to_goodprisch     -2693.8    15598.5  -0.173   0.8639  \n   within_1km_prisch            4097.2    15770.7   0.260   0.7965  \n   proximity_to_eldercare       4951.2    19685.9   0.252   0.8029  \n   proximity_to_CHAS          -15844.3    35057.6  -0.452   0.6540  \n   proximity_to_spmrkt         -3048.0    34614.6  -0.088   0.9303  \n   proximity_to_hawker         20348.1    15866.5   1.282   0.2079  \n   proximity_to_parks          -9263.6    26084.5  -0.355   0.7246  \n   proximity_to_childcare      -7379.6    51792.4  -0.142   0.8875  \n   within_350m_childcare       -3804.8     3838.0  -0.991   0.3281  \n   proximity_to_busstop        67798.6    59328.9   1.143   0.2607  \n   within_350m_busstop          2185.8     1822.9   1.199   0.2383  \n   proximity_to_mall           12992.6    35002.4   0.371   0.7127  \n\n   ---Significance stars\n   Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1 \n   Residual standard error: 15640 on 36 degrees of freedom\n   Multiple R-squared: 0.4686\n   Adjusted R-squared: 0.2324 \n   F-statistic: 1.984 on 16 and 36 DF,  p-value: 0.04377 \n   ***Extra Diagnostic information\n   Residual sum of squares: 8809680695\n   Sigma(hat): 13143.01\n   AIC:  1189.635\n   AICc:  1209.753\n   BIC:  1243.566\n   ***********************************************************************\n   *          Results of Geographically Weighted Regression              *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 40 (number of nearest neighbours)\n   Regression points: the same locations as observations are used.\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                                    Min.    1st Qu.     Median    3rd Qu.\n   Intercept                  103276.200 116917.878 125143.179 132045.986\n   floor_area_sqm               3460.170   3909.214   4015.135   5258.983\n   storey_avg                   1301.608   1377.038   1603.782   1646.507\n   remaining_lease_total_mths   -305.807   -279.591   -109.236    -84.887\n   proximity_to_mrt           -17544.314 -17128.293 -16636.057  -7304.776\n   proximity_to_goodprisch     -3829.180  -2700.017  -2382.457   3204.890\n   within_1km_prisch           -6157.607  -3737.040   4618.721   5608.667\n   proximity_to_eldercare      -3544.639  -1753.441   3912.421   4406.509\n   proximity_to_CHAS          -23946.423 -16486.447 -13718.926   4714.188\n   proximity_to_spmrkt         -1459.413   2042.040   3747.888   4883.473\n   proximity_to_hawker         17433.803  18666.208  20417.845  21040.997\n   proximity_to_parks         -12673.527  -7283.971  -5557.734   1667.461\n   proximity_to_childcare     -28332.788 -17460.966 -14701.844  32381.501\n   within_350m_childcare       -5270.263  -3880.349  -3530.989    204.700\n   proximity_to_busstop        60283.800  61431.791  79340.573  82077.784\n   within_350m_busstop          1429.394   1528.051   2318.671   2371.214\n   proximity_to_mall           12078.655  19120.249  20133.757  28929.507\n                                   Max.\n   Intercept                  218245.94\n   floor_area_sqm               5539.89\n   storey_avg                   1682.73\n   remaining_lease_total_mths    -78.42\n   proximity_to_mrt            -4834.40\n   proximity_to_goodprisch      4408.98\n   within_1km_prisch            7601.88\n   proximity_to_eldercare       6276.63\n   proximity_to_CHAS            6366.82\n   proximity_to_spmrkt          6567.95\n   proximity_to_hawker         21647.15\n   proximity_to_parks           2647.07\n   proximity_to_childcare      37758.05\n   within_350m_childcare         767.48\n   proximity_to_busstop        83640.86\n   within_350m_busstop          2568.17\n   proximity_to_mall           32001.73\n   ************************Diagnostic information*************************\n   Number of data points: 53 \n   Effective number of parameters (2trace(S) - trace(S'S)): 21.21632 \n   Effective degrees of freedom (n-2trace(S) + trace(S'S)): 31.78368 \n   AICc (GWR book, Fotheringham, et al. 2002, p. 61, eq 2.33): 1215.556 \n   AIC (GWR book, Fotheringham, et al. 2002,GWR p. 96, eq. 4.22): 1166.083 \n   BIC (GWR book, Fotheringham, et al. 2002,GWR p. 61, eq. 2.34): 1170.997 \n   Residual sum of squares: 7712357500 \n   R-square value:  0.5348005 \n   Adjusted R-square value:  0.2141817 \n\n   ***********************************************************************\n   Program stops at: 2024-11-11 12:35:28.291716 \n\n\n\n\n3.6 Converting the test data from sf data.frame to SpatialPointDataFrame\n\ntest_data_sp &lt;- Wtest_data %&gt;%\n  as_Spatial()\ntest_data_sp\n\nclass       : SpatialPointsDataFrame \nfeatures    : 29 \nextent      : 16206.33, 21512.98, 33696.28, 40886.84  (xmin, xmax, ymin, ymax)\ncrs         : +proj=tmerc +lat_0=1.36666666666667 +lon_0=103.833333333333 +k=1 +x_0=28001.642 +y_0=38744.572 +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +units=m +no_defs \nvariables   : 21\nnames       : resale_price,        town, region, flat_type, flat_model, floor_area_sqm, storey_avg, remaining_lease_total_mths, proximity_to_mrt, proximity_to_goodprisch, within_1km_prisch, proximity_to_eldercare,    proximity_to_CHAS,  proximity_to_spmrkt, proximity_to_hawker, ... \nmin values  :       395000, Bukit Batok,   West,    4 ROOM, Simplified,             83,          2,                        733,  0.1168428466505,        1.06080581347727,                 0,      0.224055609298717, 1.94724087782615e-08, 7.13026183898598e-07,   0.176832997150221, ... \nmax values  :       495000, Jurong West,   West,    4 ROOM, Simplified,             89,         11,                        777, 1.39680251695794,         5.3465481705808,                 0,       2.41846152812648,    0.479837420413484,     0.61067387833907,    2.08744917834828, ... \n\n\n\n\n3.7 Computing predicted values of the test data\n\ngwr_pred &lt;- gwr.predict(formula = resale_price ~ \n                 floor_area_sqm + \n                 storey_avg + \n                 remaining_lease_total_mths + \n                 proximity_to_mrt + \n                 proximity_to_goodprisch + \n                 within_1km_prisch + \n                 proximity_to_eldercare + \n                 proximity_to_CHAS + \n                 proximity_to_spmrkt + \n                 proximity_to_hawker + \n                 proximity_to_parks + \n                 proximity_to_childcare + \n                 within_350m_childcare + \n                 proximity_to_busstop + \n                 within_350m_busstop + \n                 proximity_to_mall,\n                        data=train_data_sp, \n                        predictdata = test_data_sp, \n                        bw=40, \n                        kernel = 'gaussian', \n                        adaptive=TRUE, \n                        longlat = FALSE)\n\nThe code chunk below will be used to save the model in rds format for future use.\n\nwrite_rds(gwr_pred, \"data/HDB/rds/gwr_pred.rds\")\n\nThe code chunk below will be used to retrieve the save gwr model object.\n\ngwr_pred &lt;- read_rds(\"data/HDB/rds/gwr_pred.rds\")\n\nThe code below can be used to display the model output.\n\ngwr_pred\n\n   ***********************************************************************\n   *                       Package   GWmodel                             *\n   ***********************************************************************\n   Program starts at: 2024-11-11 12:52:33.414486 \n   Call:\n   gwr.predict(formula = resale_price ~ floor_area_sqm + storey_avg + \n    remaining_lease_total_mths + proximity_to_mrt + proximity_to_goodprisch + \n    within_1km_prisch + proximity_to_eldercare + proximity_to_CHAS + \n    proximity_to_spmrkt + proximity_to_hawker + proximity_to_parks + \n    proximity_to_childcare + within_350m_childcare + proximity_to_busstop + \n    within_350m_busstop + proximity_to_mall, data = train_data_sp, \n    predictdata = test_data_sp, bw = 40, kernel = \"gaussian\", \n    adaptive = TRUE, longlat = FALSE)\n\n   Dependent (y) variable for prediction:  resale_price\n   Independent variables:  floor_area_sqm storey_avg remaining_lease_total_mths proximity_to_mrt proximity_to_goodprisch within_1km_prisch proximity_to_eldercare proximity_to_CHAS proximity_to_spmrkt proximity_to_hawker proximity_to_parks proximity_to_childcare within_350m_childcare proximity_to_busstop within_350m_busstop proximity_to_mall\n   Number of data points: 53\n   ***********************************************************************\n   *     Results of Geographically Weighted Regression for prediction    *\n   ***********************************************************************\n\n   *********************Model calibration information*********************\n   Kernel function: gaussian \n   Adaptive bandwidth: 40 (number of nearest neighbours)\n   Distance metric: Euclidean distance metric is used.\n\n   ****************Summary of GWR coefficient estimates:******************\n                                         Min.    1st Qu.     Median    3rd Qu.\n   Intercept_coef                   99921.875 106077.652 116574.187 132045.986\n   floor_area_sqm_coef               3469.918   4027.749   4100.722   5095.451\n   storey_avg_coef                   1308.402   1412.061   1608.985   1664.558\n   remaining_lease_total_mths_coef   -303.040   -261.827   -101.184    -84.887\n   proximity_to_mrt_coef           -17474.129 -17083.877 -16703.385  -9053.199\n   proximity_to_goodprisch_coef     -3807.324  -2382.457  -2068.831   2232.594\n   within_1km_prisch_coef           -5869.894  -2452.481   4342.919   5167.799\n   proximity_to_eldercare_coef      -3312.198   -585.822   3730.485   4108.243\n   proximity_to_CHAS_coef          -23914.949 -15799.882 -11973.248   2984.952\n   proximity_to_spmrkt_coef         -1459.413   2764.910   3472.396   6292.418\n   proximity_to_hawker_coef         17611.884  19414.352  20485.968  21427.543\n   proximity_to_parks_coef         -12665.033  -6996.662  -4522.502    612.946\n   proximity_to_childcare_coef     -28332.788 -14735.485 -10825.224  28915.454\n   within_350m_childcare_coef       -5256.943  -3685.762  -3104.551   -290.356\n   proximity_to_busstop_coef        60219.392  61557.090  79743.184  82612.147\n   within_350m_busstop_coef          1443.124   1603.663   2249.168   2330.550\n   proximity_to_mall_coef           12152.795  19532.661  21506.143  26254.662\n                                         Max.\n   Intercept_coef                  218226.957\n   floor_area_sqm_coef               5513.990\n   storey_avg_coef                   1682.731\n   remaining_lease_total_mths_coef    -79.083\n   proximity_to_mrt_coef            -5194.747\n   proximity_to_goodprisch_coef      4240.686\n   within_1km_prisch_coef            7601.878\n   proximity_to_eldercare_coef       6233.049\n   proximity_to_CHAS_coef            6059.762\n   proximity_to_spmrkt_coef          6849.090\n   proximity_to_hawker_coef         21647.147\n   proximity_to_parks_coef           2172.947\n   proximity_to_childcare_coef      37315.573\n   within_350m_childcare_coef         681.334\n   proximity_to_busstop_coef        83464.783\n   within_350m_busstop_coef          2568.166\n   proximity_to_mall_coef           31227.829\n\n   ****************       Results of GW prediction       ******************\n                       Min.   1st Qu.    Median   3rd Qu.      Max.\n   prediction        413477    423653    438323    447092    479050\n   prediction_var 305213908 332954204 356909371 401502262 664804873\n\n   ***********************************************************************\n   Program stops at: 2024-11-11 12:52:33.44649 \n\n\nEach row under the summary represents a predictor variable, with corresponding statistics for the estimated coefficients across locations:\n\nMin, 1st Qu., Median, 3rd Qu., Max: These values show the distribution of coefficient estimates for each predictor variable across all locations. A wide range (difference between Min and Max) suggests substantial spatial variation in how a predictor influences resale_price in different areas.\n\n\n3.7.1 Interpretations:\n\nfloor_area_sqm_coef: The coefficient for floor_area_sqm has a range from approximately 4,027 to 5,513, indicating that each square meter of floor area affects resale price differently across locations. Higher coefficients in some areas imply that additional floor space increases resale price more significantly there.\nproximity_to_mrt_coef: The coefficient ranges from -17,474 to -1,608, meaning proximity to MRT (mass rapid transit) stations generally decreases resale price (negative impact). The wide range suggests that this impact is more substantial in some areas than others.\nproximity_to_hawker_coef: The coefficient for proximity to hawker centers has a range from approximately -28,355 to -14,625. This consistent negative impact across locations could suggest that proximity to hawker centers is generally not seen as favorable for resale prices, but the extent varies geographically.\nproximity_to_busstop_coef: The coefficients for proximity to bus stops have positive values ranging from 50.3 to 2,568. This indicates that being close to bus stops might have a small positive effect on resale prices, with stronger effects in certain locations.\n\nGenerally, a wide range of coefficient values for a predictor implies significant spatial variation, meaning the predictor’s influence on resale_price depends heavily on location.\n\n\n3.7.2 Results of GWR Prediction\n\nPredicted Resale Prices:\n\nMin: 305,213\n1st Quartile: 332,925\nMedian: 435,699\n3rd Quartile: 498,332\nMax: 664,408\n\nThese values represent the distribution of the predicted resale prices across all locations based on the GWR model. They give an idea of the range of resale prices in the dataset after considering spatial effects.\n\n\n\n\n3.8 Key Takeaways\n\nSpatial Variation: The GWR model reveals that the impact of predictors on resale_price is not uniform across locations. This is particularly important for variables like floor_area_sqm, proximity_to_mrt, and proximity_to_hawker, which show significant variability in coefficients.\nLocal Effects: GWR captures local effects better than a global model (like ordinary least squares) by adjusting the coefficients for each location, providing insights into how property characteristics affect resale prices differently across regions.\nInterpretation for Decision-Making: Real estate developers, urban planners, or policymakers could use this information to understand the varying influences of proximity to amenities or property features on housing prices and plan accordingly for different neighborhoods.\n\nThis output suggests that the GWR model successfully captures the local variations in resale_price, making it a suitable approach for analyzing spatially heterogeneous data like property prices."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Take-home_Ex03/Take-homeExercise3.1.html",
    "href": "Take-home_Ex03/Take-homeExercise3.1.html",
    "title": "Take-home Exercise 3.1",
    "section": "",
    "text": "The goal of this analysis is to predict the resale prices of Housing and Development Board (HDB) flats in Singapore for the period of July to September 2024. Using data from 2023, we aim to build a predictive model that considers both structural and locational factors, capturing the unique spatial characteristics that influence HDB resale prices. This model will provide valuable insights for:\n\nPotential buyers looking to make informed investment decisions\nReal estate investors seeking accurate market forecasts\nPolicymakers aiming to understand spatial trends in housing affordability\n\n\n\n\nHousing in Singapore, particularly HDB flats, represents a critical component of household wealth and serves as a significant investment for most residents. Given Singapore’s compact urban environment, several factors play a role in determining HDB resale prices:\n\nLocational Factors: Proximity to amenities like public transportation (MRT), shopping centers, and quality schools\nStructural Factors: Attributes such as the flat’s size, age, and floor level\nMacro-level Influences: Economic conditions and government policies impacting the housing market\n\nAccurately predicting resale prices is essential not only for financial planning and investment but also for urban planning and policy-making to ensure sustainable housing affordability.\n\n\n\nTraditional models like Ordinary Least Squares (OLS) regression have limitations when applied to spatial data, as they often ignore spatial heterogeneity and autocorrelation. These limitations include:\n\nSpatial Heterogeneity: Relationships between housing prices and influencing factors vary across locations.\nSpatial Autocorrelation: Housing prices in nearby areas tend to be similar, leading to clustering effects.\n\nTo address these challenges, we will employ Geographically Weighted Models (GWMs), specifically:\n\nGeographically Weighted Regression (GWR), which captures spatial variability in linear relationships.\n\nBy comparing the performance of OLS and GWR models, this study will demonstrate the effectiveness of spatially weighted approaches for real estate price prediction in Singapore."
  },
  {
    "objectID": "Take-home_Ex03/Take-homeExercise3.1.html#overview",
    "href": "Take-home_Ex03/Take-homeExercise3.1.html#overview",
    "title": "Take-home Exercise 3.1",
    "section": "",
    "text": "The goal of this analysis is to predict the resale prices of Housing and Development Board (HDB) flats in Singapore for the period of July to September 2024. Using data from 2023, we aim to build a predictive model that considers both structural and locational factors, capturing the unique spatial characteristics that influence HDB resale prices. This model will provide valuable insights for:\n\nPotential buyers looking to make informed investment decisions\nReal estate investors seeking accurate market forecasts\nPolicymakers aiming to understand spatial trends in housing affordability\n\n\n\n\nHousing in Singapore, particularly HDB flats, represents a critical component of household wealth and serves as a significant investment for most residents. Given Singapore’s compact urban environment, several factors play a role in determining HDB resale prices:\n\nLocational Factors: Proximity to amenities like public transportation (MRT), shopping centers, and quality schools\nStructural Factors: Attributes such as the flat’s size, age, and floor level\nMacro-level Influences: Economic conditions and government policies impacting the housing market\n\nAccurately predicting resale prices is essential not only for financial planning and investment but also for urban planning and policy-making to ensure sustainable housing affordability.\n\n\n\nTraditional models like Ordinary Least Squares (OLS) regression have limitations when applied to spatial data, as they often ignore spatial heterogeneity and autocorrelation. These limitations include:\n\nSpatial Heterogeneity: Relationships between housing prices and influencing factors vary across locations.\nSpatial Autocorrelation: Housing prices in nearby areas tend to be similar, leading to clustering effects.\n\nTo address these challenges, we will employ Geographically Weighted Models (GWMs), specifically:\n\nGeographically Weighted Regression (GWR), which captures spatial variability in linear relationships.\n\nBy comparing the performance of OLS and GWR models, this study will demonstrate the effectiveness of spatially weighted approaches for real estate price prediction in Singapore."
  },
  {
    "objectID": "Take-home_Ex03/Take-homeExercise3.1.html#data-upload-and-initial-setup",
    "href": "Take-home_Ex03/Take-homeExercise3.1.html#data-upload-and-initial-setup",
    "title": "Take-home Exercise 3.1",
    "section": "2 Data Upload and Initial Setup",
    "text": "2 Data Upload and Initial Setup\n\n2.1 Installing and launching the R packages\nIn this exercise, the following R packages will be used, they are:\n\ntidyverse: A collection of R packages (including dplyr, ggplot2, tidyr, and more) for data manipulation, visualization, and cleaning. It is essential for streamlined data handling and is widely used for data wrangling and efficient manipulation of data frames.\nsf (Simple Features): A package that provides a standard approach for handling spatial data, such as shapefiles and geographic coordinates, in R. It’s useful for transforming data into spatial formats and performing spatial operations.\nhttr: Facilitates HTTP requests, enabling access to external APIs to fetch locational or additional data about amenities or other contextual factors that may influence housing prices.\njsonlite: A package used for parsing JSON data, often encountered in web APIs. This package is useful for converting JSON data into R data structures, allowing for seamless integration of JSON-formatted locational or contextual data.\nrvest: Supports web scraping, making it easy to extract data from websites. This can be useful if additional information from web sources (such as lists of nearby amenities or environmental factors) is required for analysis.\ntmap: A powerful package for creating static and interactive thematic maps. It’s helpful for visualizing spatial patterns, clusters, and trends in housing prices or other variables across geographic areas.\nleaflet: A mapping package focused on interactive maps. It is useful for creating dynamic spatial visualizations, which can help communicate results effectively to stakeholders.\nggstatsplot: An extension of ggplot2 for enhanced statistical visualizations, adding statistical information and context to graphs. It’s useful for presenting both spatial and non-spatial relationships within the dataset.\nspdep: Used for spatial dependency analysis, spdep provides tools for calculating spatial autocorrelation (e.g., Moran’s I) and creating spatial weights, essential for analyzing spatial relationships among housing prices or other spatial data points.\nspgwr: Implements Geographically Weighted Regression (GWR) in R. This is useful for local regression analyses that reveal spatial variations in relationships, such as the effect of locational and structural factors on housing prices.\nolsrr: A package for ordinary least squares (OLS) regression diagnostics, which can aid in assessing model assumptions, identifying influential observations, and evaluating model performance.\ngtsummary: Provides summary tables and statistics in a clean format, making it easy to generate quick overviews of data or model outputs. Useful for generating reports with organized statistical summaries.\nGWmodel: A specialized package for geographically weighted models, including Geographically Weighted Random Forests (GWRF), which are advanced models that capture complex spatial patterns in data.\nrsample: A package for creating resampling objects, which is useful for cross-validation and other validation strategies to assess model performance on different subsets of data.\nranger: An efficient implementation of the Random Forest algorithm in R, which can handle large datasets and be applied in predictive modeling tasks, including spatial modeling when combined with GWmodel.\nspatialML: Supports machine learning on spatial data, providing tools that are specifically designed to handle the unique characteristics of spatial data in predictive modeling.\n\n\npacman::p_load(tidyverse, sf, httr, jsonlite, rvest, tmap, leaflet, ggstatsplot, spdep, spgwr, olsrr, gtsummary, GWmodel, rsample, ranger, SpatialML)"
  },
  {
    "objectID": "Take-home_Ex03/Take-homeExercise3.1.html#data-import-and-preparation",
    "href": "Take-home_Ex03/Take-homeExercise3.1.html#data-import-and-preparation",
    "title": "Take-home Exercise 3.1",
    "section": "3 Data Import and Preparation",
    "text": "3 Data Import and Preparation\n\n3.1 Primary Dataset\nHDB Resale Flat Prices: The primary dataset for this analysis is the HDB Resale Flat Prices dataset available from Data.gov.sg. This dataset provides information on resale transactions for HDB flats, including price, location, flat type, and structural details. Key fields in this dataset that will be used for the analysis include:\n\nFlat Type: Differentiates between three-room, four-room, and five-room flats, which are the focus of the study.\nTransaction Price: The resale price of each HDB flat, which is the dependent variable to be predicted.\nFloor Area and Floor Level: Measures of the flat’s size and position, which are structural factors that impact value.\nRemaining Lease: The number of years left on the lease, crucial for pricing as HDB flats depreciate over time.\n\n\nresale &lt;- read_csv(\"data/HDB/rawdata/resale.csv\") %&gt;%\n  filter(\n    month &gt;= \"2023-01\" & month &lt;= \"2023-12\",\n    flat_type %in% c(\"3 ROOM\", \"4 ROOM\", \"5 ROOM\")\n  )\n\nRows: 192234 Columns: 11\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (8): month, town, flat_type, block, street_name, storey_range, flat_mode...\ndbl (3): floor_area_sqm, lease_commence_date, resale_price\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nThe regional classification data for Singapore was sourced from Wikipedia, a widely recognized reference for administrative and geographical information. This dataset delineates Singapore into five primary regions: North, North-East, East, Central, and West, and assigns specific towns or planning areas to each region. Incorporating this classification enables a structured spatial analysis by providing a consistent regional framework. By joining this regional data with the primary dataset based on town names, the analysis can account for spatial heterogeneity and facilitate comparisons across regions, thus enhancing the rigor and depth of socio-economic or real estate trend analysis within Singapore.\n\nregion &lt;- read_csv(\"data/HDB/rawdata/region.csv\") \n\nRows: 55 Columns: 2\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr (2): town, region\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\n\n# Define a helper function to capitalize the first letter of each word\ncapitalize_words &lt;- function(x) {\n  sapply(strsplit(x, \" \"), function(words) {\n    paste(toupper(substring(words, 1, 1)), tolower(substring(words, 2)), sep = \"\", collapse = \" \")\n  })\n}\n\n# Apply the helper function to standardize the `town` column to `region`\nregion &lt;- region %&gt;%\n  mutate(town = capitalize_words(town))\n\n\nresale_tidy &lt;- resale %&gt;%\n  \n  # Create a new `address` column by combining `block` and `street_name`\n  mutate(address = paste(block, street_name)) %&gt;%\n  \n  # Extract the first two characters of `remaining_lease` as years and convert to integer\n  mutate(remaining_lease_yr = as.integer(\n    str_sub(remaining_lease, 0, 2))) %&gt;%\n  \n  # Extract characters from position 9 to 11 of `remaining_lease` as months and convert to integer , default to 0 if missing\n  mutate(remaining_lease_mth = if_else(is.na(as.integer(str_sub(remaining_lease, 9, 11))), \n                                       0, \n                                       as.integer(str_sub(remaining_lease, 9, 11)))) %&gt;%\n  \n  # Apply the helper function to standardize the `town` column in `resale_tidy` dataset\n  mutate(town = capitalize_words(town)) %&gt;%\n\n  # Perform the join\n  left_join(region, by = \"town\") %&gt;%\n  \n  # Manually assign \"Central\" region to specific towns after the join\n  mutate(region = ifelse(town %in% c(\"Central Area\", \"Kallang/whampoa\"), \"Central\", region)) %&gt;%\n  \n  # Calculate total remaining lease in months by converting years to months and adding the extracted months\n  mutate(\n    remaining_lease_total_mths = (remaining_lease_yr * 12) + remaining_lease_mth\n  ) %&gt;%\n  \n  # Remove the intermediate columns `remaining_lease_yr` and `remaining_lease_mth`\n  select(-remaining_lease_yr, -remaining_lease_mth) %&gt;%\n  \n  # Split `storey_range` into minimum and maximum storey columns\n  # Extract the first two characters of `storey_range` as the minimum storey level\n  mutate(storey_min = as.integer(str_sub(storey_range, 1, 2))) %&gt;%\n  \n  # Extract the last two characters of `storey_range` as the maximum storey level\n  mutate(storey_max = as.integer(str_sub(storey_range, 7, 8))) %&gt;%\n  \n  # Calculate the average storey level by averaging `storey_min` and `storey_max`\n  mutate(\n    storey_avg = (storey_min + storey_max) / 2\n  )\n\n\nwrite_rds(resale_tidy, \"data/HDB/rds/resale_tidy.rds\")\n\n\nresale_tidy &lt;- read_rds(\"data/HDB/rds/resale_tidy.rds\")\n\n\nadd_list &lt;- sort(unique(resale_tidy$address))\n\n\nget_coords &lt;- function(add_list){\n  \n  # Create a data frame to store all retrieved coordinates\n  postal_coords &lt;- data.frame()\n    \n  for (i in add_list){\n    #print(i)\n\n    r &lt;- GET('https://www.onemap.gov.sg/api/common/elastic/search?',\n           query=list(searchVal=i,\n                     returnGeom='Y',\n                     getAddrDetails='Y'))\n    data &lt;- fromJSON(rawToChar(r$content))\n    found &lt;- data$found\n    res &lt;- data$results\n    \n    # Create a new data frame for each address\n    new_row &lt;- data.frame()\n    \n    # If single result, append \n    if (found == 1){\n      postal &lt;- res$POSTAL \n      lat &lt;- res$LATITUDE\n      lng &lt;- res$LONGITUDE\n      new_row &lt;- data.frame(address= i, \n                            postal = postal, \n                            latitude = lat, \n                            longitude = lng)\n    }\n    \n    # If multiple results, drop NIL and append top 1\n    else if (found &gt; 1){\n      # Remove those with NIL as postal\n      res_sub &lt;- res[res$POSTAL != \"NIL\", ]\n      \n      # Set as NA first if no Postal\n      if (nrow(res_sub) == 0) {\n          new_row &lt;- data.frame(address= i, \n                                postal = NA, \n                                latitude = NA, \n                                longitude = NA)\n      }\n      \n      else{\n        top1 &lt;- head(res_sub, n = 1)\n        postal &lt;- top1$POSTAL \n        lat &lt;- top1$LATITUDE\n        lng &lt;- top1$LONGITUDE\n        new_row &lt;- data.frame(address= i, \n                              postal = postal, \n                              latitude = lat, \n                              longitude = lng)\n      }\n    }\n\n    else {\n      new_row &lt;- data.frame(address= i, \n                            postal = NA, \n                            latitude = NA, \n                            longitude = NA)\n    }\n    \n    # Add the row\n    postal_coords &lt;- rbind(postal_coords, new_row)\n  }\n  return(postal_coords)\n}\n\n\ncoords &lt;- get_coords(add_list)\n\n\nwrite_rds(coords, \"data/HDB/rds/coords.rds\")\n\n\ncoords &lt;- read_rds(\"data/HDB/rds/coords.rds\")\n\n\n# Ensure that both address columns are in uppercase and have consistent formatting\nresale_tidy &lt;- resale_tidy %&gt;%\n  mutate(address = toupper(address))\n\ncoords &lt;- coords %&gt;%\n  mutate(address = toupper(address))\n\n# Perform the join by address column\nresale_combined &lt;- resale_tidy %&gt;%\n  left_join(coords, by = \"address\")\n\n\n# Select and arrange columns in the specified order\nresale_final &lt;- resale_combined %&gt;%\n  select(resale_price, town, region, flat_type, flat_model, floor_area_sqm, storey_avg, remaining_lease_total_mths, latitude, longitude)\n\n# Display the final data\nhead(resale_final)\n\n# A tibble: 6 × 10\n  resale_price town       region  flat_type flat_model floor_area_sqm storey_avg\n         &lt;dbl&gt; &lt;chr&gt;      &lt;chr&gt;   &lt;chr&gt;     &lt;chr&gt;               &lt;dbl&gt;      &lt;dbl&gt;\n1       380000 Ang Mo Kio North-… 3 ROOM    New Gener…             67          5\n2       635000 Ang Mo Kio North-… 3 ROOM    Model A                70         26\n3       380000 Ang Mo Kio North-… 3 ROOM    New Gener…             67          8\n4       365000 Ang Mo Kio North-… 3 ROOM    New Gener…             73          5\n5       418000 Ang Mo Kio North-… 3 ROOM    New Gener…             73          8\n6       380000 Ang Mo Kio North-… 3 ROOM    New Gener…             67          5\n# ℹ 3 more variables: remaining_lease_total_mths &lt;dbl&gt;, latitude &lt;chr&gt;,\n#   longitude &lt;chr&gt;\n\n# Convert resale_final to an sf object if it has latitude and longitude columns\nresale_final &lt;- resale_final %&gt;%\n  st_as_sf(coords = c(\"longitude\", \"latitude\"), crs = 4326)  # Set the original CRS (e.g., WGS84)\n\n# Transform to the desired CRS (e.g., Singapore's SVY21 CRS)\nresale_final &lt;- st_transform(resale_final, crs = 3414)\n\n\n\n3.2 Secondary Data — Locational Data\nTo enhance the predictive model, we incorporate secondary data sources to capture locational factors that influence HDB resale prices. These factors typically require geographic data about the proximity to amenities, which can be collected from multiple sources:\n\nPublic Transportation (MRT Stations):\n\nData Source: LTA MRT Station Exit (GEOJSON) dataset from Data.gov.sg, provided by the Land Transport Authority (LTA).\nPurpose: This dataset provides the geographical coordinates of each MRT station exit. Using this data will allow us to calculate the precise distance from HDB flats to the nearest MRT exit, giving a more accurate measure of accessibility than a central station location would.\nUsage in Analysis: By incorporating MRT station exits instead of just station locations, we can improve the precision of our proximity calculations. Proximity to MRT stations is a critical factor influencing HDB resale prices, as flats closer to MRT exits are generally more attractive to buyers due to the ease of access to public transport.\nBy using MRT station exit data, we can calculate the shortest walking distance from each HDB flat to the nearest MRT exit, enhancing the locational data quality and potentially improving the predictive power of the model for HDB resale prices.\n\n\n\nmrt &lt;- st_read(\"data/Locational/rawdata/mrt.geojson\")\nmrt &lt;- st_transform(mrt, crs = 3414)\n\n\n# Calculate nearest distance to MRT station\nnearest_mrt &lt;- st_nearest_feature(resale_final, mrt)\nresale_final &lt;- resale_final %&gt;%\n  mutate(proximity_to_mrt = st_distance(resale_final, mrt[nearest_mrt, ], by_element = TRUE))%&gt;%\n  mutate(proximity_to_mrt = as.numeric(proximity_to_mrt) / 1000)  # Convert meters to km\n\n\nGood Primary Schools:\n\nData Source: Ministry of Education’s data on schools (from the CSV file provided) and additional information from Math Nuggets - Primary School Rankings 2024.\n\nPrimary School Rankings 2024, extracted from: https://mathnuggets.sg/best-primary-schools-in-singapore/\n\n\nRanking\nSchool\n\n\n\n\n1\nMethodist Girls’ School (Primary)\n\n\n2\nTao Nan School\n\n\n3\nAi Tong School\n\n\n4\nHoly Innocents’ Primary School\n\n\n5\nCHIJ St. Nicholas Girls’ School (Primary)\n\n\n6\nAdmiralty Primary School\n\n\n7\nSt. Joseph’s Institution Junior\n\n\n8\nCatholic High School (Primary)\n\n\n9\nAnglo-Chinese School (Junior)\n\n\n10\nChongfu School\n\n\n11\nKong Hwa School\n\n\n12\nSt. Hilda’s Primary School\n\n\n13\nAnglo-Chinese School (Primary)\n\n\n14\nNan Chiau Primary School\n\n\n15\nNan Hua Primary School\n\n\n16\nNanyang Primary School\n\n\n17\nPei Hwa Presbyterian Primary School\n\n\n18\nKuo Chuan Presbyterian Primary School\n\n\n19\nRulang Primary School\n\n\n20\nSingapore Chinese Girls’ Primary School\n\n\n\nPurpose: Proximity to top 20 primary schools often increases property values due to the demand for accessible quality education. This analysis will focus on the top primary schools as per the 2024 rankings, which will be scraped from the website. Only the schools ranked as the best in Singapore will be included in the dataset, filtered to match the school_name field in full capital letters for consistency.\n\n\n\n# Load the CSV file with school information\nschool_data &lt;- read.csv(\"data/Locational/rawdata/Generalinformationofschools.csv\")\n\n# Define a list of top 20 primary schools in uppercase\ntop_schools &lt;- c(\n  \"METHODIST GIRLS' SCHOOL (PRIMARY)\", \n  \"TAO NAN SCHOOL\",\n  \"AI TONG SCHOOL\",\n  \"HOLY INNOCENTS' PRIMARY SCHOOL\",\n  \"CHIJ ST. NICHOLAS GIRLS' SCHOOL\",\n  \"ADMIRALTY PRIMARY SCHOOL\",\n  \"ST. JOSEPH'S INSTITUTION JUNIOR\",\n  \"CATHOLIC HIGH SCHOOL\",\n  \"ANGLO-CHINESE SCHOOL (JUNIOR)\",\n  \"CHONGFU SCHOOL\",\n  \"KONG HWA SCHOOL\",\n  \"ST. HILDA'S PRIMARY SCHOOL\",\n  \"ANGLO-CHINESE SCHOOL (PRIMARY)\",\n  \"NAN CHIAU PRIMARY SCHOOL\",\n  \"NAN HUA PRIMARY SCHOOL\",\n  \"NANYANG PRIMARY SCHOOL\",\n  \"PEI HWA PRESBYTERIAN PRIMARY SCHOOL\",\n  \"KUO CHUAN PRESBYTERIAN PRIMARY SCHOOL\",\n  \"RULANG PRIMARY SCHOOL\",\n  \"SINGAPORE CHINESE GIRLS' PRIMARY SCHOOL\"\n)\n\n# Filter the CSV data to keep only rows with top primary schools\nfiltered_school_data &lt;- school_data %&gt;%\n  filter(school_name %in% top_schools) %&gt;%\n  select(school_name, postal_code)\n\n# Prepare list of postal codes\npostal_codes &lt;- filtered_school_data$postal_code\n\n# Use the get_coords function to retrieve coordinates\nschool_coords &lt;- get_coords(postal_codes)\n\n# Convert postal_code to character in filtered_school_data\nfiltered_school_data &lt;- filtered_school_data %&gt;%\n  mutate(postal_code = as.character(postal_code))\n\n# Merge the coordinates back with the filtered school data\nfinal_school_data &lt;- filtered_school_data %&gt;%\n  left_join(school_coords, by = c(\"postal_code\" = \"postal\"))\n\n# Display final dataset\nhead(final_school_data)\n\n# Convert final_school_data to an sf object if it has latitude and longitude columns\nfinal_school_data &lt;- final_school_data %&gt;%\n  st_as_sf(coords = c(\"longitude\", \"latitude\"), crs = 4326)  # Set the original CRS (e.g., WGS84)\n\n# Transform to the desired CRS (e.g., Singapore's SVY21 CRS)\nfinal_school_data &lt;- st_transform(final_school_data, crs = 3414)\n\n\n# Calculate nearest distance to good school\nnearest_goodprisch &lt;- st_nearest_feature(resale_final, final_school_data)\nresale_final &lt;- resale_final %&gt;%\n  mutate(proximity_to_goodprisch = st_distance(resale_final, final_school_data[nearest_goodprisch, ], by_element = TRUE))%&gt;%\n  mutate(proximity_to_goodprisch = as.numeric(proximity_to_goodprisch) / 1000)  # Convert meters to km\n\n\n#Create a buffer of 1km around each resale flat\nbuffer_1km &lt;- st_buffer(resale_final, \n                        dist = 1000)\n\n#Plot the newly created buffers and each good primary school\ntmap_mode(\"view\")\ntm_shape(buffer_1km) +\n  tm_polygons() +\ntm_shape(final_school_data) +\n  tm_dots()\n\n#Count the number of good primary schools\nresale_final$within_1km_prisch &lt;- lengths(\n  st_intersects(buffer_1km, final_school_data))\n\n\nHealthcare and Eldercare Facilities:\n\nData Source: dataset from Data.gov.sg, provided by the Ministry of Health (MOH).\nPurpose: Accessibility to healthcare facilities can be a factor, especially for buyers looking for long-term residence or properties suitable for elderly family members.\n\n\n\neldercare &lt;- st_read(dsn = \"data/Locational/rawdata\",\n                     layer = \"ELDERCARE\") %&gt;%\n  st_transform(crs = 3414)\n\n\n# Calculate nearest distance to eldercare\nnearest_eldercare &lt;- st_nearest_feature(resale_final, eldercare)\nresale_final &lt;- resale_final %&gt;%\n  mutate(proximity_to_eldercare = st_distance(resale_final, eldercare[nearest_eldercare, ], by_element = TRUE))%&gt;%\n  mutate(proximity_to_eldercare = as.numeric(proximity_to_eldercare) / 1000)  # Convert meters to km\n\n\nCHAS &lt;- st_read(\"data/Locational/rawdata/CHAS Clinics.kml\") %&gt;%\n  st_transform(crs = 3414)\n\n\n# Calculate nearest distance to CHAS clinic\nnearest_CHAS &lt;- st_nearest_feature(resale_final, CHAS)\nresale_final &lt;- resale_final %&gt;%\n  mutate(proximity_to_CHAS = st_distance(resale_final, CHAS[nearest_CHAS, ], by_element = TRUE))%&gt;%\n  mutate(proximity_to_CHAS = as.numeric(proximity_to_CHAS) / 1000)  # Convert meters to km\n\n\nSupermarkets:\n\nData Source: dataset from Data.gov.sg, provided by the Singapore Food Agency (SFA).\nPurpose: Supermarkets play a crucial role in daily life by providing access to essential groceries and household items. Proximity to a supermarket is highly desirable for residents, especially for families. As such, flats located near supermarkets are generally more attractive, as they offer added convenience for everyday needs, positively impacting resale prices.\n\n\n\nspmrkt &lt;- st_read(\"data/Locational/rawdata/Supermarket.geojson\")\nsummary(spmrkt)\nspmrkt &lt;- st_transform(spmrkt, crs = 3414)\n\n\n# Calculate nearest distance to supermarket\nnearest_spmrkt &lt;- st_nearest_feature(resale_final, spmrkt)\nresale_final &lt;- resale_final %&gt;%\n  mutate(proximity_to_spmrkt = st_distance(resale_final, spmrkt[nearest_spmrkt, ], by_element = TRUE))%&gt;%\n  mutate(proximity_to_spmrkt = as.numeric(proximity_to_spmrkt) / 1000)  # Convert meters to km\n\n\nFood Amenities:\n\nData Source: dataset from Data.gov.sg, provided by the National Environment Agency (NEA).\nPurpose: Access to diverse food options is highly valued in Singapore. Flats located near popular hawker centers are likely to have higher resale values, as they offer residents convenient access to a variety of affordable dining options, enhancing the lifestyle appeal of the location.\n\n\n\nhawker &lt;- st_read(\"data/Locational/rawdata/Hawker.geojson\")\nsummary(hawker)\nhawker &lt;- st_transform(hawker, crs = 3414)\n\n\n# Calculate nearest distance to hawker\nnearest_hawker &lt;- st_nearest_feature(resale_final, hawker)\nresale_final &lt;- resale_final %&gt;%\n  mutate(proximity_to_hawker = st_distance(resale_final, hawker[nearest_hawker, ], by_element = TRUE))%&gt;%\n  mutate(proximity_to_hawker = as.numeric(proximity_to_hawker) / 1000)  # Convert meters to km\n\n\nParks and Nature Reserves:\n\nData Source: dataset from Data.gov.sg, provided by the National Parks Board (NPARKS).\nPurpose: Proximity to parks and nature reserves can increase property appeal for families and nature enthusiasts.\n\n\n\nparks &lt;- st_read(\"data/Locational/rawdata/Parks.kml\") %&gt;%\n  st_transform(crs = 3414)\n\n\n# Calculate nearest distance to parks and nature reserves\nnearest_parks &lt;- st_nearest_feature(resale_final, parks)\nresale_final &lt;- resale_final %&gt;%\n  mutate(proximity_to_parks = st_distance(resale_final, parks[nearest_parks, ], by_element = TRUE))%&gt;%\n  mutate(proximity_to_parks = as.numeric(proximity_to_parks) / 1000)  # Convert meters to km\n\n\nChildcare Facilities:\n\nData Source: Childcare center locations from Data.gov.sg or private datasets if available.\nPurpose: The presence of childcare facilities nearby is valuable for young families, potentially influencing their interest in the property.\n\n\n\nchildcare &lt;- st_read(\"data/Locational/rawdata/Childcare.geojson\") %&gt;%\n  st_transform(crs = 3414)\n\n\n# Calculate nearest distance to childcare\nnearest_childcare &lt;- st_nearest_feature(resale_final, childcare)\nresale_final &lt;- resale_final %&gt;%\n  mutate(proximity_to_childcare = st_distance(resale_final, childcare[nearest_childcare, ], by_element = TRUE))%&gt;%\n  mutate(proximity_to_childcare = as.numeric(proximity_to_childcare) / 1000)  # Convert meters to km\n\n\n#Create a buffer of 350m around each resale flat\nbuffer_350m &lt;- st_buffer(resale_final, \n                        dist = 350)\n\n#Plot the newly created buffers and each childcare\ntmap_mode(\"view\")\ntm_shape(buffer_350m) +\n  tm_polygons() +\ntm_shape(childcare) +\n  tm_dots()\n\n#Count the number of childcare\nresale_final$within_350m_childcare &lt;- lengths(\n  st_intersects(buffer_350m, childcare))\n\n\nPublic Transportation Accessibility:\n\nBus Stops: Data on bus stop locations within 350m or 1km from the property, sourced from LTA’s DataMall\nPurpose: Ease of access to public transportation increases a property’s attractiveness and can be a significant factor in resale value.\n\n\n\nbusstop &lt;- st_read(dsn = \"data/Locational/rawdata\",\n                     layer = \"BusStop\") %&gt;%\n  st_transform(crs = 3414)\n\n\n# Calculate nearest distance to bus stop\nnearest_busstop &lt;- st_nearest_feature(resale_final, busstop)\nresale_final &lt;- resale_final %&gt;%\n  mutate(proximity_to_busstop = st_distance(resale_final, busstop[nearest_busstop, ], by_element = TRUE))%&gt;%\n  mutate(proximity_to_busstop = as.numeric(proximity_to_busstop) / 1000)  # Convert meters to km\n\n\n#Plot the newly created buffers and each bus stops\ntmap_mode(\"view\")\ntm_shape(buffer_350m) +\n  tm_polygons() +\ntm_shape(busstop) +\n  tm_dots()\n\n#Count the number of bus stops\nresale_final$within_350m_busstop &lt;- lengths(\n  st_intersects(buffer_350m, busstop))\n\n\nShopping Amenities:\n\nData Source: Location data on shopping malls can be sourced from OpenStreetMap or business directories in Singapore.\nPurpose: Shopping malls provide access to a wide range of retail options, entertainment, and services, which enhance the appeal of nearby properties. Flats close to malls are often in higher demand due to the convenience of having various amenities within reach, potentially increasing resale values.\n\n\n\n# Define the URL of the Wikipedia page\nurl &lt;- \"https://en.wikipedia.org/wiki/List_of_shopping_malls_in_Singapore\"\n\n# Read the HTML content of the page\npage &lt;- read_html(url)\n\n# Extract mall names from list items across all sections\nmall &lt;- page %&gt;%\n  html_nodes(\"ul &gt; li\") %&gt;% # Selects all list items that are direct children of unordered lists\n  html_text()\n\n# Filter mall names to exclude non-mall related content, if needed\nmall &lt;- mall[mall != \"\"]\n\n# Remove the \"[1]\" notation from Knightsbridge or similar entries\nmall &lt;- gsub(\"\\\\[1\\\\]\", \"\", mall)\n\n# Extract only lines 50 to 223\nmall &lt;- mall[50:223]\n\n# Make specific replacements in the extracted range\nmall[42] &lt;- gsub(\"GRiD\\\\(pomo\\\\)\", \"GR.ID\", mall[42])  # Change \"GRiD(pomo)\" to \"GR.ID\"\nmall[85] &lt;- gsub(\"Paya Lebar Quarter \\\\(PLQ\\\\)\", \"Paya Lebar Quarter\", mall[85])  # Change \"Paya Lebar Quarter (PLQ)\" to \"Paya Lebar Quarter\"\n\n# Print extracted and modified mall names for the specified range\nprint(mall)\n\n\n# Function to get coordinates from OneMap API\nget_coordinates &lt;- function(mall_name) {\n  base_url &lt;- \"https://www.onemap.gov.sg/api/common/elastic/search?\"\n  response &lt;- GET(base_url, query = list(searchVal = mall_name, returnGeom = \"Y\", getAddrDetails = \"N\"))\n  data &lt;- content(response, \"parsed\")\n  if (length(data$results) &gt; 0) {\n    result &lt;- data$results[[1]]\n    return(c(result$X, result$Y))\n  } else {\n    return(c(NA, NA))\n  }\n}\n\n# Initialize vectors to store coordinates\nx_coords &lt;- numeric(length(mall))\ny_coords &lt;- numeric(length(mall))\n\n# Loop through each mall name to get coordinates\nfor (i in seq_along(mall)) {\n  coords &lt;- get_coordinates(mall[i])\n  x_coords[i] &lt;- coords[1]\n  y_coords[i] &lt;- coords[2]\n  Sys.sleep(1)  # Pause to respect API rate limits\n}\n\n# Combine mall names and their coordinates into a data frame\nmall_coord &lt;- data.frame(\n  Mall_Name = mall,\n  longitude = x_coords,\n  latitude = y_coords,\n  stringsAsFactors = FALSE\n)\n\n# Print the data frame to check the results\nprint(mall_coord)\n\n\n# Convert to an sf object with EPSG:3414 (SVY21 coordinate system for Singapore)\nmall_coord &lt;- mall_coord %&gt;%\n  st_as_sf(coords = c(\"longitude\", \"latitude\"), crs = 3414)  # Set the original CRS (e.g., WGS84)\n\n# Print the updated mall_coord to view the geometry points in (longitude, latitude)\nprint(mall_coord)\n\n\nwrite_rds(mall_coord, \"data/HDB/rds/mall_coord.rds\")\n\n\nmall_coord &lt;- read_rds(\"data/HDB/rds/mall_coord.rds\")\n\n\n# Plot using tmap\ntmap_mode(\"view\")\ntm_shape(mall_coord) +\n  tm_dots(col = \"blue\", size = 0.1, alpha = 0.8) +\n  tm_basemap(\"OpenStreetMap\")\n\n\n# Calculate nearest distance to shopping mall\nnearest_mall &lt;- st_nearest_feature(resale_final, mall_coord)\nresale_final &lt;- resale_final %&gt;%\n  mutate(proximity_to_mall = st_distance(resale_final, mall_coord[nearest_mall, ], by_element = TRUE))%&gt;%\n  mutate(proximity_to_mall = as.numeric(proximity_to_mall) / 1000)  # Convert meters to km\n\n\nwrite_rds(resale_final, \"data/HDB/rds/resale_final.rds\")\n\n\nresale_final &lt;- read_rds(\"data/HDB/rds/resale_final.rds\")\n\nEach of these secondary data sources will be processed to derive proximity variables (e.g., distance to nearest MRT station, number of schools within 1km) for inclusion in the predictive model. This helps capture the spatial elements that influence property prices beyond the structural features of the flats themselves.\n\n\n3.3 Spatial Autocorrelation Check\nThe purpose of checking for spatial autocorrelation is to determine whether HDB resale prices exhibit spatial dependency. If there is a significant spatial autocorrelation, it means that the prices of nearby HDB flats tend to be similar. This spatial dependency justifies the use of geographically weighted models, which are designed to handle location-based variations.\nMoran’s I is a statistical measure that assesses the degree of spatial autocorrelation in a dataset. It ranges from -1 to +1:\n\nPositive Values: Indicate positive spatial autocorrelation, where similar values (e.g., high or low resale prices) are clustered together.\nNegative Values: Indicate negative spatial autocorrelation, where dissimilar values are adjacent.\nValue Near Zero: Suggests spatial randomness, where there is no clear pattern in the spatial distribution.\n\nEnsure that the coords data is in spatial format (e.g., sf object in R) with coordinates for each resale flat. We’ll need latitude and longitude coordinates for each record to analyze spatial relationships.\nA spatial weight matrix defines the spatial relationships between points. We can create a weight matrix based on distance or neighborhood contiguity.\nFor HDB flats, a distance-based approach (e.g., nearest neighbors) is often appropriate.\nWhen calculating k-nearest neighbors, identical points cause issues because the algorithm cannot uniquely identify the nearest neighbors if multiple points are located at the same coordinates. We can aggregate the data by averaging or summing relevant attributes to keep one unique location per point.\n\nresale_aggregated &lt;- resale_final %&gt;%\n  group_by(flat_type, floor_area_sqm, storey_avg, remaining_lease_total_mths, geometry) %&gt;%\n  summarize(\n    resale_price = mean(resale_price, na.rm = TRUE)\n  ) %&gt;%\n  ungroup()\n\n\nwrite_rds(resale_aggregated, \"data/HDB/rds/resale_aggregated.rds\")\n\n\nresale_aggregated &lt;- read_rds(\"data/HDB/rds/resale_aggregated.rds\")\n\nUse Moran’s I to test for spatial autocorrelation of resale prices across the dataset.\nA significant Moran’s I value (with a p-value &lt; 0.05) indicates spatial autocorrelation, suggesting that geographically weighted models (e.g., GWR) are appropriate for this analysis.\nInterpret Moran’s I Results:\n\nPositive Moran’s I Value (with significant p-value): Indicates clustering of similar prices (e.g., high or low resale prices in specific areas), justifying the use of geographically weighted models to account for spatial variability.\nNon-significant Moran’s I Value (or close to zero): Implies no spatial autocorrelation, suggesting that traditional models like Ordinary Least Squares (OLS) might be sufficient as there is no strong spatial dependency in the data.\n\n\n# Convert geometry to spatial coordinates for neighborhood matrix\ncoords &lt;- st_coordinates(resale_aggregated)\n\n# Create a k-nearest neighbor structure\nknn &lt;- knearneigh(coords, k = 5)  # Set k to the desired number of neighbors\nnb &lt;- knn2nb(knn)\nweight_matrix &lt;- nb2listw(nb, style = \"W\")\n\n# Calculate Moran's I\nmoran_test &lt;- moran.test(resale_aggregated$resale_price, weight_matrix)\n\n\nwrite_rds(moran_test, \"data/HDB/rds/moran_test.rds\")\n\n\nmoran_test &lt;- read_rds(\"data/HDB/rds/moran_test.rds\")\n\n\n# View results\nprint(moran_test)\n\n\n    Moran I test under randomisation\n\ndata:  resale_aggregated$resale_price  \nweights: weight_matrix    \n\nMoran I statistic standard deviate = 172, p-value &lt; 2.2e-16\nalternative hypothesis: greater\nsample estimates:\nMoran I statistic       Expectation          Variance \n     6.617663e-01     -4.329942e-05      1.480471e-05 \n\n\nTo interpret the results of Moran’s I test for spatial autocorrelation, let’s break down the key components of the output:\n\n3.3.1 Moran’s I Statistic:\n\nValue: approximately 0.662\nInterpretation: Moran’s I ranges from -1 to +1. Values close to +1 indicate strong positive spatial autocorrelation, meaning similar values are clustered together in space. Values close to -1 indicate strong negative spatial autocorrelation, meaning dissimilar values are located near each other. A value of 0 suggests a random spatial pattern (no spatial autocorrelation).\nIn your case, a Moran’s I of approximately 0.662 indicates moderate to strong positive spatial autocorrelation. This suggests that higher resale prices tend to cluster with other higher resale prices, and lower prices tend to cluster with other lower prices in the spatial layout of your dataset.\n\n\n\n3.3.2 Expectation:\n\nValue: -4.329942e-05 (close to zero).\nInterpretation: This is the expected value of Moran’s I under the null hypothesis of spatial randomness (no spatial autocorrelation). If the observed Moran’s I significantly deviates from this expectation, it suggests spatial autocorrelation.\n\n\n\n3.3.3 Variance:\n\nValue: 1.480471e-05\nInterpretation: This is the variance of Moran’s I under the null hypothesis, used to calculate the significance of the observed statistic.\n\n\n\n3.3.4 Standard Deviation and P-Value:\n\nStandard Deviation: 171.99\nP-Value: &lt;2.2e-16\nInterpretation: The very low p-value indicates that the observed Moran’s I is statistically significant, rejecting the null hypothesis of spatial randomness. This means there is strong evidence of spatial clustering in resale prices, with a pattern that is unlikely to have occurred by random chance.\n\n\n\n3.3.5 Summary of Interpretation\n\nSpatial Pattern: There is strong evidence of spatial autocorrelation in resale prices, indicating that properties with similar prices are geographically clustered.\nSignificance: The significant p-value (very close to zero) confirms that the observed spatial pattern is statistically meaningful.\nPractical Implication: Spatial factors such as proximity to amenities, neighborhood quality, or other spatially dependent factors may be influencing resale prices. You may consider using geographically weighted regression (GWR) or other spatial models to further explore these spatial relationships.\n\n\n\n3.3.6 Geographical Clusters of High and Low Prices:\n\nDarker blue colors represent higher resale prices, while lighter yellow colors represent lower prices.\nThere appear to be clusters of higher-priced flats in certain areas, likely around central or well-connected neighborhoods, as well as newer developments. This clustering aligns with the positive spatial autocorrelation indicated by Moran’s I test, where high-price units tend to be near other high-price units, and similarly for lower-priced units."
  },
  {
    "objectID": "Take-home_Ex03/Take-homeExercise3.1.html#exploratory-data-analysis-eda",
    "href": "Take-home_Ex03/Take-homeExercise3.1.html#exploratory-data-analysis-eda",
    "title": "Take-home Exercise 3.1",
    "section": "4 Exploratory Data Analysis (EDA)",
    "text": "4 Exploratory Data Analysis (EDA)\nEDA is essential to understand the dataset, identify patterns, and prepare it for modeling. The steps below guide you through performing a thorough EDA, with each component addressing different aspects of the data.\n\n4.1 Descriptive Statistics\nThe first step in EDA is to generate descriptive statistics, which provide a numerical summary of key variables. By calculating metrics like the mean, median, standard deviation, minimum, and maximum for resale prices, as well as structural features like the area, floor level, remaining lease, and age of the unit, we can get a sense of the central tendencies and variability in the data.\nThis overview is helpful for spotting potential outliers or variations that may influence resale prices. For example, high variability in resale prices might indicate a wide range of property values across different regions and flat types. Descriptive statistics also help establish a baseline understanding of the dataset, highlighting the general characteristics of HDB flats within the specified time range.\nThe codes chunks below uses glimpse() to display the data structure of will do the job.\n\nglimpse(resale_final)\n\nRows: 23,555\nColumns: 22\n$ resale_price               &lt;dbl&gt; 380000, 635000, 380000, 365000, 418000, 380…\n$ town                       &lt;chr&gt; \"Ang Mo Kio\", \"Ang Mo Kio\", \"Ang Mo Kio\", \"…\n$ region                     &lt;chr&gt; \"North-East\", \"North-East\", \"North-East\", \"…\n$ flat_type                  &lt;chr&gt; \"3 ROOM\", \"3 ROOM\", \"3 ROOM\", \"3 ROOM\", \"3 …\n$ flat_model                 &lt;chr&gt; \"New Generation\", \"Model A\", \"New Generatio…\n$ floor_area_sqm             &lt;dbl&gt; 67, 70, 67, 73, 73, 67, 89, 68, 75, 74, 75,…\n$ storey_avg                 &lt;dbl&gt; 5, 26, 8, 5, 8, 5, 8, 5, 5, 2, 2, 5, 8, 8, …\n$ remaining_lease_total_mths &lt;dbl&gt; 649, 1065, 649, 640, 640, 643, 673, 685, 67…\n$ geometry                   &lt;POINT [m]&gt; POINT (28537.68 38825.23), POINT (292…\n$ proximity_to_mrt           &lt;dbl&gt; 0.4046012, 0.7314224, 0.4046012, 0.5263600,…\n$ proximity_to_goodprisch    &lt;dbl&gt; 0.8000960, 1.0934641, 0.8000960, 1.1818905,…\n$ within_1km_prisch          &lt;int&gt; 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0…\n$ proximity_to_eldercare     &lt;dbl&gt; 0.40435866, 0.25495445, 0.40435866, 0.05809…\n$ proximity_to_CHAS          &lt;dbl&gt; 0.12666079, 0.28840296, 0.12666079, 0.06303…\n$ proximity_to_spmrkt        &lt;dbl&gt; 0.15775712, 0.31448012, 0.15775712, 0.06303…\n$ proximity_to_hawker        &lt;dbl&gt; 0.1378719, 0.3828329, 0.1378719, 0.1477741,…\n$ proximity_to_parks         &lt;dbl&gt; 0.19858307, 0.06656148, 0.19858307, 0.17137…\n$ proximity_to_childcare     &lt;dbl&gt; 1.857691e-01, 1.151054e-01, 1.857691e-01, 1…\n$ within_350m_childcare      &lt;int&gt; 2, 4, 2, 5, 5, 1, 2, 3, 3, 4, 5, 1, 3, 3, 3…\n$ proximity_to_busstop       &lt;dbl&gt; 0.16643716, 0.02802881, 0.16643716, 0.18021…\n$ within_350m_busstop        &lt;int&gt; 6, 4, 6, 4, 4, 5, 4, 10, 4, 5, 5, 4, 6, 10,…\n$ proximity_to_mall          &lt;dbl&gt; 1.0027651, 0.6647901, 1.0027651, 0.4886993,…\n\n\nNext, summary() of base R is used to display the summary statistics of resale_final tibble data frame.\n\nsummary(resale_final)\n\n  resale_price         town              region           flat_type        \n Min.   : 150000   Length:23555       Length:23555       Length:23555      \n 1st Qu.: 450000   Class :character   Class :character   Class :character  \n Median : 545000   Mode  :character   Mode  :character   Mode  :character  \n Mean   : 562716                                                           \n 3rd Qu.: 640000                                                           \n Max.   :1500000                                                           \n  flat_model        floor_area_sqm     storey_avg    remaining_lease_total_mths\n Length:23555       Min.   : 52.00   Min.   : 2.00   Min.   : 505.0            \n Class :character   1st Qu.: 75.00   1st Qu.: 5.00   1st Qu.: 730.0            \n Mode  :character   Median : 93.00   Median : 8.00   Median : 887.0            \n                    Mean   : 93.37   Mean   : 8.96   Mean   : 889.6            \n                    3rd Qu.:110.00   3rd Qu.:11.00   3rd Qu.:1092.0            \n                    Max.   :176.00   Max.   :50.00   Max.   :1154.0            \n          geometry     proximity_to_mrt  proximity_to_goodprisch\n POINT        :23555   Min.   :0.01463   Min.   :0.04958        \n epsg:3414    :    0   1st Qu.:0.30168   1st Qu.:1.17410        \n +proj=tmer...:    0   Median :0.51494   Median :1.90283        \n                       Mean   :0.58134   Mean   :2.07394        \n                       3rd Qu.:0.77348   3rd Qu.:2.63467        \n                       Max.   :3.49822   Max.   :7.16529        \n within_1km_prisch proximity_to_eldercare proximity_to_CHAS proximity_to_spmrkt\n Min.   :0.000     Min.   :0.0000         Min.   :0.0000    Min.   :0.0000     \n 1st Qu.:0.000     1st Qu.:0.3218         1st Qu.:0.1078    1st Qu.:0.1723     \n Median :0.000     Median :0.6156         Median :0.1690    Median :0.2662     \n Mean   :0.198     Mean   :0.7870         Mean   :0.1844    Mean   :0.2880     \n 3rd Qu.:0.000     3rd Qu.:1.0739         3rd Qu.:0.2420    3rd Qu.:0.3787     \n Max.   :2.000     Max.   :4.7675         Max.   :2.7122    Max.   :3.3254     \n proximity_to_hawker proximity_to_parks proximity_to_childcare\n Min.   :0.006981    Min.   :0.006039   Min.   :0.00000       \n 1st Qu.:0.351676    1st Qu.:0.303246   1st Qu.:0.07462       \n Median :0.628092    Median :0.493864   Median :0.11856       \n Mean   :0.747090    Mean   :0.569264   Mean   :0.12951       \n 3rd Qu.:1.007198    3rd Qu.:0.737417   3rd Qu.:0.17331       \n Max.   :2.867630    Max.   :2.066652   Max.   :2.91807       \n within_350m_childcare proximity_to_busstop within_350m_busstop\n Min.   : 0.000        Min.   :0.01543      Min.   : 0.00      \n 1st Qu.: 2.000        1st Qu.:0.07423      1st Qu.: 6.00      \n Median : 3.000        Median :0.10751      Median : 8.00      \n Mean   : 3.695        Mean   :0.11455      Mean   : 7.89      \n 3rd Qu.: 5.000        3rd Qu.:0.14592      3rd Qu.:10.00      \n Max.   :20.000        Max.   :0.39147      Max.   :19.00      \n proximity_to_mall\n Min.   :0.0000   \n 1st Qu.:0.3810   \n Median :0.5887   \n Mean   :0.6486   \n 3rd Qu.:0.8614   \n Max.   :3.1782   \n\n\n\n\n4.2 Visualize Relationships\nTo gain insights into the relationships between resale prices and various structural and locational features, we can create scatter plots and violin plots.\nScatter plots allow us to examine how resale prices vary with continuous variables like area, age, and remaining lease. For instance, plotting resale price against area may reveal a positive trend, suggesting that larger flats generally command higher prices. Similarly, a scatter plot of resale price versus age could show whether older flats have lower resale values, providing insight into the impact of depreciation. By mapping prices geographically, we can identify areas with higher or lower resale values, giving us an understanding of spatial clustering in the data. These visualizations make it easier to observe trends and relationships that may not be apparent from summary statistics alone.\n\n# Scatter plot: Resale price vs Area\nplot_area &lt;- ggplot(resale_final, aes(x = floor_area_sqm, y = resale_price)) +\n  geom_point(alpha = 0.5) +\n  labs(title = \"Resale Price vs. Area\", x = \"Area (sqm)\", y = \"Resale Price\")\nggsave(\"plot_resale_price_vs_area.png\", plot = plot_area, width = 7, height = 5, dpi = 300)\n\n# Scatter plot: Resale price vs Storey\nplot_storey &lt;- ggplot(resale_final, aes(x = storey_avg, y = resale_price)) +\n  geom_point(alpha = 0.5) +\n  labs(title = \"Resale Price vs. Storey\", x = \"Storey\", y = \"Resale Price\")\nggsave(\"plot_resale_price_vs_storey.png\", plot = plot_storey, width = 7, height = 5, dpi = 300)\n\n# Scatter plot: Resale price vs Age of Flat\nplot_age &lt;- ggplot(resale_final, aes(x = remaining_lease_total_mths, y = resale_price)) +\n  geom_point(alpha = 0.5) +\n  labs(title = \"Resale Price vs. Age of Flat\", x = \"Age (months)\", y = \"Resale Price\")\nggsave(\"plot_resale_price_vs_age.png\", plot = plot_age, width = 7, height = 5, dpi = 300)\n\n# Scatter plot: Resale price vs Proximity to Nearest MRT exits\nplot_mrt &lt;- ggplot(resale_final, aes(x = proximity_to_mrt, y = resale_price)) +\n  geom_point(alpha = 0.5) +\n  labs(title = \"Resale Price vs. Proximity to Nearest MRT exits\", x = \"Distance (km)\", y = \"Resale Price\")\nggsave(\"plot_resale_price_vs_mrt.png\", plot = plot_mrt, width = 7, height = 5, dpi = 300)\n\n# Scatter plot: Resale price vs Proximity to Nearest Good Primary School\nplot_goodprisch &lt;- ggplot(resale_final, aes(x = proximity_to_goodprisch, y = resale_price)) +\n  geom_point(alpha = 0.5) +\n  labs(title = \"Resale Price vs. Proximity to Nearest Good Primary School\", x = \"Distance (km)\", y = \"Resale Price\")\nggsave(\"plot_resale_price_vs_goodprisch.png\", plot = plot_goodprisch, width = 7, height = 5, dpi = 300)\n\n# Scatter plot: Resale price vs No. of Good Primary School within 1km\nplot_prisch &lt;- ggplot(resale_final, aes(x = within_1km_prisch, y = resale_price)) +\n  geom_point(alpha = 0.5) +\n  labs(title = \"Resale Price vs. No. of Good Primary School within 1km\", x = \"No. of Good Primary Schools\", y = \"Resale Price\")\nggsave(\"plot_resale_price_vs_within_1km_prisch.png\", plot = plot_prisch, width = 7, height = 5, dpi = 300)\n\n# Scatter plot: Resale price vs Proximity to Nearest Eldercare\nplot_eldercare &lt;- ggplot(resale_final, aes(x = proximity_to_eldercare, y = resale_price)) +\n  geom_point(alpha = 0.5) +\n  labs(title = \"Resale Price vs. Proximity to Nearest Eldercare\", x = \"Distance (km)\", y = \"Resale Price\")\nggsave(\"plot_resale_price_vs_eldercare.png\", plot = plot_eldercare, width = 7, height = 5, dpi = 300)\n\n# Scatter plot: Resale price vs Proximity to Nearest CHAS Clinic\nplot_chas &lt;- ggplot(resale_final, aes(x = proximity_to_CHAS, y = resale_price)) +\n  geom_point(alpha = 0.5) +\n  labs(title = \"Resale Price vs. Proximity to Nearest CHAS Clinic\", x = \"Distance (km)\", y = \"Resale Price\")\nggsave(\"plot_resale_price_vs_chas.png\", plot = plot_chas, width = 7, height = 5, dpi = 300)\n\n# Scatter plot: Resale price vs Proximity to Nearest Supermarket\nplot_spmrkt &lt;- ggplot(resale_final, aes(x = proximity_to_spmrkt, y = resale_price)) +\n  geom_point(alpha = 0.5) +\n  labs(title = \"Resale Price vs. Proximity to Nearest Supermarket\", x = \"Distance (km)\", y = \"Resale Price\")\nggsave(\"plot_resale_price_vs_spmrkt.png\", plot = plot_spmrkt, width = 7, height = 5, dpi = 300)\n\n# Scatter plot: Resale price vs Proximity to Nearest Hawker\nplot_hawker &lt;- ggplot(resale_final, aes(x = proximity_to_hawker, y = resale_price)) +\n  geom_point(alpha = 0.5) +\n  labs(title = \"Resale Price vs. Proximity to Nearest Hawker\", x = \"Distance (km)\", y = \"Resale Price\")\nggsave(\"plot_resale_price_vs_hawker.png\", plot = plot_hawker, width = 7, height = 5, dpi = 300)\n\n# Scatter plot: Resale price vs Proximity to Nearest Park\nplot_parks &lt;- ggplot(resale_final, aes(x = proximity_to_parks, y = resale_price)) +\n  geom_point(alpha = 0.5) +\n  labs(title = \"Resale Price vs. Proximity to Nearest Park\", x = \"Distance (km)\", y = \"Resale Price\")\nggsave(\"plot_resale_price_vs_parks.png\", plot = plot_parks, width = 7, height = 5, dpi = 300)\n\n# Scatter plot: Resale price vs No. of Childcares within 350m\nplot_childcare &lt;- ggplot(resale_final, aes(x = within_350m_childcare, y = resale_price)) +\n  geom_point(alpha = 0.5) +\n  labs(title = \"Resale Price vs. No. of Childcares within 350m\", x = \"No. of Childcares\", y = \"Resale Price\")\nggsave(\"plot_resale_price_vs_childcare.png\", plot = plot_childcare, width = 7, height = 5, dpi = 300)\n\n# Scatter plot: Resale price vs Proximity to Nearest Bus Stop\nplot_busstop &lt;- ggplot(resale_final, aes(x = proximity_to_busstop, y = resale_price)) +\n  geom_point(alpha = 0.5) +\n  labs(title = \"Resale Price vs. Proximity to Nearest Bus Stop\", x = \"Distance (km)\", y = \"Resale Price\")\nggsave(\"plot_resale_price_vs_busstop.png\", plot = plot_busstop, width = 7, height = 5, dpi = 300)\n\n# Scatter plot: Resale price vs No. of Bus Stops within 350m\nplot_within_busstop &lt;- ggplot(resale_final, aes(x = within_350m_busstop, y = resale_price)) +\n  geom_point(alpha = 0.5) +\n  labs(title = \"Resale Price vs. No. of Bus Stops within 350m\", x = \"No. of Bus Stops\", y = \"Resale Price\")\nggsave(\"plot_resale_price_vs_within_busstop.png\", plot = plot_within_busstop, width = 7, height = 5, dpi = 300)\n\n# Scatter plot: Resale price vs Proximity to Nearest Mall\nplot_mall &lt;- ggplot(resale_final, aes(x = proximity_to_mall, y = resale_price)) +\n  geom_point(alpha = 0.5) +\n  labs(title = \"Resale Price vs. Proximity to Nearest Mall\", x = \"Distance (km)\", y = \"Resale Price\")\nggsave(\"plot_resale_price_vs_mall.png\", plot = plot_mall, width = 7, height = 5, dpi = 300)\n\n\nResale Price vs. Area (sqm): There is a strong positive relationship, with resale prices increasing as the floor area of the property increases, indicating that larger flats are valued higher.\n\nResale Price vs. Storey: Higher floors appear to have a slight positive effect on resale prices, possibly due to better views or reduced noise.\n\nResale Price vs. Age of Flat (months): Older flats show a decrease in resale price, indicating that newer flats are generally more desirable.\n\nResale Price vs. Proximity to Nearest MRT exits: Properties closer to MRT exits have higher resale prices, showing that accessibility to public transportation is a key factor in property valuation.\n\nResale Price vs. Proximity to Nearest Good Primary School: There is no strong correlation between proximity to a good primary school and resale prices, indicating limited impact on value.\n\nResale Price vs. No. of Good Primary Schools within 1km: The resale price seems to show minimal variation with the number of good primary schools within 1km, indicating that proximity to schools may not strongly influence pricing.\n\nResale Price vs. Proximity to Nearest Eldercare: Resale prices tend to decrease slightly as distance from the nearest eldercare facility increases, suggesting that closer proximity to eldercare may have a small positive impact on property value.\n\nResale Price vs. Proximity to Nearest CHAS Clinic: There is a weak negative correlation, where resale prices tend to be slightly higher when closer to CHAS clinics, though the effect appears minimal.\n\nResale Price vs. Proximity to Nearest Supermarket: Resale prices appear higher when closer to supermarkets, implying that proximity to essential amenities like supermarkets positively impacts housing prices.\n\nResale Price vs. Proximity to Nearest Hawker Center: Resale prices decrease with distance from hawker centers, suggesting that closeness to affordable food options is a desirable attribute.\n\nResale Price vs. Proximity to Nearest Park: Proximity to parks shows some clustering of higher resale prices near parks, but the relationship is not very strong, as there is a wide spread across various distances.\n\nResale Price vs. Number of Childcares within 350m: The number of nearby childcares shows a more scattered trend, with resale prices higher around lower numbers of nearby childcare facilities. This may suggest that too many nearby childcares don’t significantly enhance property value.\n\nResale Price vs. Proximity to Nearest Bus Stop: There is a very dense clustering of data points close to bus stops, with no strong indication of increased resale price with proximity to bus stops. The resale prices are distributed widely regardless of proximity.\n\nResale Price vs. Number of Bus Stops within 350m: The resale price does not show a clear trend relative to the number of nearby bus stops. Although resale prices are generally higher for areas with fewer bus stops within 350m, the spread remains wide across different bus stop counts, suggesting that proximity to multiple bus stops within a short distance may not strongly influence resale price.\n\nResale Price vs. Proximity to Nearest Mall: Resale prices tend to be slightly higher when closer to malls, indicating that proximity to malls may have a mild positive influence on prices. However, there’s still a significant spread across all distances.\nA violin plot is also an excellent choice for visualizing the distribution of resale prices across different regions and flat models because it combines elements of both a box plot and a kernel density plot. Here are specific reasons why a violin plot is suitable:\n\nDistribution Insight: Violin plots provide a clear view of the distribution’s shape for each category, revealing where resale prices are concentrated and if there are multiple modes (peaks) in the data.\nComparison Across Categories: By plotting different regions and flat models side-by-side, we can easily compare the price distributions across categories and detect variations in spread, skewness, or the presence of outliers.\nDensity Information: Unlike box plots, violin plots show the density of the data at different price levels. This is helpful in understanding if resale prices cluster around certain values or if they are more uniformly distributed.\n\nWe’ll analyse 4-room flats specifically based on their popularity and representativeness in Singapore’s housing market. Four-room flats are among the most common flat types in Singapore’s HDB system, making them a relevant indicator of general market trends. By focusing on this category, we can gain insights into typical resale prices across regions while comparing different flat models. This narrower focus allows for more meaningful and consistent comparisons without the variability introduced by other flat types, which may have different price dynamics due to their size and demand characteristics.\n\n# Filter for 4-room flats only\nfiltered_data &lt;- resale_tidy %&gt;%\n  filter(flat_type == \"4 ROOM\")  # Filtering for 4-room flats\n\n# Create the violin plot with facets for each region, using color for flat model\nplot &lt;- ggplot(filtered_data, aes(x = \"\", y = resale_price, fill = flat_model)) +\n  geom_violin(trim = FALSE) +\n  facet_wrap(~ region, scales = \"free\", ncol = 2) +  # Arrange facets in two columns\n  labs(title = \"Resale Prices of 4-Room Flats by Flat Model in Each Region\",\n       x = \"Region\", y = \"Resale Price\") +\n  scale_y_continuous(labels = scales::dollar_format()) +\n  theme_minimal() +\n  theme(axis.text.x = element_blank(),  # Remove x-axis text for readability\n        axis.title.x = element_blank()) +\n  guides(fill = guide_legend(title = \"Flat Model\"))\n\n# Save the plot as an image file\nggsave(\"resale_prices_violin_plot.png\", plot = plot, width = 10, height = 8)\n\n\nThe violin plot above provides insights into the distribution of resale prices for 4-room flats across various regions in Singapore, segmented by flat model. Here are some key observations:\n\nRegional Price Variability:\n\nCentral Region: The resale prices in the Central region have the highest variability, with several flat models (such as Premium Apartment, DBSS) reaching close to $1,500,000. This reflects the higher demand and premium associated with centrally located flats in Singapore.\nNorth-East Region: Prices here are generally clustered within a narrower range between $500,000 and $800,000, with DBSS and Premium Apartment models showing higher resale values.\nEast Region: Similar to the North-East, the East region shows moderate resale values between $500,000 and $800,000, with DBSS flats on the higher end.\nNorth and West Regions: These regions display the lowest price variability, with most models staying between $400,000 and $800,000. In the North, flat models like DBSS and Premium Apartment tend to show slightly higher resale values, though not as high as those in the Central or East regions.\n\nFlat Model Influence on Prices:\n\nDBSS (Design, Build, and Sell Scheme) and Premium Apartment models generally fetch higher resale prices across all regions. This is likely due to the enhanced design, additional amenities, and higher quality associated with these models.\nStandard and Simplified models tend to have lower resale prices, indicating they are more basic options with fewer amenities, and thus appeal to buyers looking for affordability over additional features.\nNew Generation and Model A are popular across regions but usually fall into a mid-range price point, indicating a balanced offering of quality and affordability.\n\nDistribution and Density:\n\nEach violin plot represents the density of resale prices for a given flat model within a region. Wider areas in the violin plot indicate a higher concentration of resale transactions at a specific price point.\nFor example, in the Central region, Premium Apartment flats have a wide spread, suggesting a high concentration of resale prices around the median. However, in the North-East region, DBSS flats have a narrower spread, indicating that resale prices are more concentrated within a smaller range.\n\nInsights by Region:\n\nCentral Region: Dominated by higher-value flats, with some models displaying very high resale prices due to the prime location.\nEast and North-East Regions: These regions offer a good mix of mid-to-high resale values, particularly for DBSS and Premium Apartment flats.\nNorth and West Regions: These are more affordable regions, with flat models generally priced lower compared to the Central area.\n\n\nIn summary, the Central region commands the highest prices, likely due to its proximity to the city center, while the other regions offer a range of mid- to high-priced flats, depending on the model. DBSS and Premium Apartments consistently have higher resale prices across all regions, indicating their premium value in the market. This plot helps identify patterns in resale prices by region and flat model, which could be valuable for buyers, investors, and policymakers.\n\n\n4.3 Spatial Distribution Analysis\nA spatial distribution analysis allows us to understand how resale prices are geographically distributed across different regions of Singapore. By converting the dataset into a spatial format (e.g., sf object with latitude and longitude coordinates), we can create choropleth maps to show variations in resale prices. Using color gradients to represent different price levels, we can visually identify high-value and low-value clusters across Singapore.\nThis approach highlights specific regions where resale prices are consistently higher or lower, such as areas near central business districts or regions with greater access to amenities. Spatial distribution analysis is particularly useful for understanding location-based trends and identifying regions that may warrant further investigation or targeted modeling techniques.\n\n# Visualize spatial distribution of resale prices\ntmap_mode(\"view\")\n\ntmap mode set to interactive viewing\n\ntm_shape(resale_final) +\n  tm_dots(col = \"resale_price\", palette = \"YlOrRd\", title = \"HDB Resale Prices\") +\n  tm_layout(title = \"Spatial Distribution of HDB Resale Prices\")\n\n\n\n\n\n\n\n4.4 Correlation Analysis\nCorrelation analysis is an essential step for identifying which variables have the strongest influence on resale prices. By selecting relevant numerical columns, including resale price, area, age, remaining lease, and floor level, we can compute pairwise correlations and focus on relationships with resale price. The resulting correlation matrix provides a quick overview of how each feature is associated with resale price, revealing strong positive or negative correlations.\nVisualizing this matrix with a heatmap helps to quickly identify which factors are most influential. For example, a high positive correlation between area and resale price would indicate that larger flats tend to sell for more, while a negative correlation with age may suggest that older flats depreciate in value. This analysis informs which features are most relevant for predictive modeling, allowing us to focus on those that have a meaningful impact on resale prices.\nBased on the observations from the violin plot, we can select one region and one flat model. For example, we could choose the “Central” region and “DBSS” model if we’re interested in high-value areas and premium flats, or the “West” region with “Standard” flats for a more affordable segment.\n\n# Filtering for Central region and DBSS flat model\ncentral_DBSS &lt;- resale_final %&gt;%\n  filter(flat_type == \"4 ROOM\", region == \"Central\", flat_model == \"DBSS\")\n\n# Filtering for West region and Simplified flat model\nWest_Simplified &lt;- resale_final %&gt;%\n  filter(flat_type == \"4 ROOM\", region == \"West\", flat_model == \"Simplified\")\n\n\n# Remove geometry and select specific columns\ncentral_DBSS_nogeo &lt;- central_DBSS %&gt;%\n  st_drop_geometry() %&gt;%\n  select(-c(2:5))\n\n# Generate the correlation matrix plot\ncorrelation_plot &lt;- ggcorrmat(central_DBSS_nogeo[, 2:16])\n\n# Save the correlation plot as an image file\nggsave(\"central_DBSS_correlation_matrix.png\", plot = correlation_plot, width = 10, height = 8)\n\n\nThe correlation matrix for the “Central” region and “DBSS” model (high-value areas) shows the relationships between various attributes, such as proximity to amenities, storey level, floor area, and remaining lease. Here are some observations:\n\nStrong Positive Correlations:\n\nProximity to public transportation: There is a strong positive correlation between proximity_to_busstop and within_350m_busstop (0.96) and between proximity_to_childcare and within_350m_childcare (0.96). This reflects that flats near these amenities are also generally close to other amenities in high-density, central areas.\nBetween amenities: proximity_to_sprmkt (supermarket) and proximity_to_hawker have a very high correlation (0.98), as do proximity_to_parks and proximity_to_hawker (0.91). This suggests that these amenities are often located near each other, increasing the overall desirability of these locations.\n\nNegative Correlations:\n\nRemaining Lease and Proximity to Amenities: There is a notable negative correlation between remaining_lease_total_mths and proximity_to_sprmkt (-0.75), proximity_to_hawker (-0.81), and proximity_to_parks (-0.67). This suggests that older flats (with shorter remaining leases) are located closer to these amenities, possibly due to urban planning changes over time that placed newer buildings farther from the center.\nStorey Level (Average) and Proximity to Amenities: storey_avg shows negative correlations with amenities like proximity_to_sprmkt (-0.75) and proximity_to_parks (-0.67). This could indicate that higher floors are generally located in areas farther from these amenities, which might align with the planning for more luxurious high-rise buildings away from the central amenities.\n\nNon-significant Relationships:\n\nThe matrix indicates non-significant correlations with an “X” mark, particularly in relationships with storey_avg and some proximity metrics. For instance, storey_avg and proximity_to_goodprisch (good primary schools) have an insignificant correlation. This suggests that the vertical positioning (floor level) of flats doesn’t meaningfully impact proximity to certain amenities, like schools.\n\nImplications for Resale Price Analysis:\n\nHigh positive correlations among amenity proximities imply that these factors could be clustered, affecting prices similarly. Since older properties are closer to key amenities (shown by the negative correlation with remaining_lease_total_mths), they may attract different buyer demographics compared to newer properties.\nThe lack of significant correlation between storey_avg and proximity variables for certain amenities may imply that floor level does not influence proximity benefits for high-value DBSS flats in the Central region.\n\nRecommendations for Modeling:\n\nFeature Selection: Given the high correlations among proximity variables, selecting a few representative amenities rather than all could prevent multicollinearity in models predicting resale prices.\nCluster Analysis: Grouping high-correlated amenities could be useful for understanding how proximity affects high-value property prices.\nFocus on Age-Related Factors: Since remaining lease is strongly correlated with proximity to amenities, it may act as a proxy for central vs. peripheral location in older properties.\n\n\n\n# Remove geometry and select specific columns\nWest_Simplified_nogeo &lt;- West_Simplified %&gt;%\n  st_drop_geometry() %&gt;%\n  select(-c(2:5))\n\n# Generate the correlation matrix plot\ncorrelation_plot &lt;- ggcorrmat(West_Simplified_nogeo[, 2:16])\n\n# Save the correlation plot as an image file\nggsave(\"West_Simplified_correlation_matrix.png\", plot = correlation_plot, width = 10, height = 8)\n\n\nThe correlation matrix for the “West” region with “Standard” flats (an affordable segment) highlights the relationships between different factors influencing resale prices. Here’s a breakdown:\n\nPositive Correlations Among Amenities:\n\nThere is a strong positive correlation between proximity variables such as proximity_to_busstop and within_350m_busstop (0.87), proximity_to_childcare and within_350m_childcare (0.72), and proximity_to_goodprisch and within_1km_prisch (0.74). This indicates that these amenities are clustered together, making specific areas more accessible and potentially more desirable.\nAdditionally, some proximity variables like proximity_to_spmrkt (supermarket) and proximity_to_hawker show a moderately positive correlation, suggesting that affordable regions have grouped amenities in certain neighborhoods, creating small commercial hubs.\n\nNegative Correlations with Remaining Lease:\n\nThere is a moderately negative correlation between remaining_lease_total_mths and several proximity variables, such as proximity_to_hawker (-0.44) and proximity_to_parks (-0.38). This suggests that older flats with shorter leases tend to be closer to amenities, reflecting urban planning trends where older properties are located in more established areas with nearby amenities.\n\nStorey Level and Proximity to Amenities:\n\nThe average storey level (storey_avg) shows weak correlations with most proximity variables, meaning that in the affordable segment, the vertical positioning (higher or lower floors) of flats is not strongly related to the distance to amenities. This could suggest that height is not a major factor in price determination within this segment in the West region.\n\nNon-significant Relationships:\n\nThere are several non-significant correlations (marked with “X”) across the matrix, particularly involving storey_avg and various amenity proximities. This lack of significant relationships implies that factors like floor level do not have a clear impact on the accessibility of amenities in affordable areas.\n\nImplications for Resale Price Analysis:\n\nThe clustering of amenities and the moderate negative correlations with remaining lease suggest that proximity to amenities is more likely in older flats. This factor might be more relevant for affordability, as amenities can increase the desirability of older flats with shorter leases.\nThe overall weak correlation of storey_avg and the proximity variables points to a relatively uniform impact of accessibility, regardless of floor level, indicating that buyers in this segment may prioritize horizontal (location) rather than vertical accessibility.\n\nRecommendations for Further Analysis:\n\nModeling Strategy: Since proximity variables are clustered, one could consider aggregating them or using principal component analysis (PCA) to reduce dimensionality in models predicting resale prices.\nFocus on Lease and Proximity: Given the moderate relationship between lease length and amenity proximity, models could investigate how remaining lease length and accessibility to clustered amenities jointly affect property desirability.\n\n\nOverall, EDA provides a comprehensive understanding of the dataset through descriptive statistics, relationship visualizations, spatial distribution analysis, and correlation analysis. Each step contributes valuable insights: descriptive statistics offer a general overview, visualizations highlight trends and patterns, spatial analysis reveals geographical variations, and correlation analysis identifies the most influential factors. Together, these insights form the foundation for developing an effective predictive model for HDB resale prices."
  },
  {
    "objectID": "Take-home_Ex03/Take-homeExercise3.1.html#building-a-hedonic-pricing-model-by-using-multiple-linear-regression-method",
    "href": "Take-home_Ex03/Take-homeExercise3.1.html#building-a-hedonic-pricing-model-by-using-multiple-linear-regression-method",
    "title": "Take-home Exercise 3.1",
    "section": "5 Building a Hedonic Pricing Model by using Multiple Linear Regression Method",
    "text": "5 Building a Hedonic Pricing Model by using Multiple Linear Regression Method\nTo predict HDB resale prices effectively, we will start by establishing a multiple linear regression model. Next, we will explore geographically weighted models to capture spatial heterogeneity. This section outlines the key steps for building and evaluating these models.\n\n5.1 Multiple Linear Regression Method\nThe multiple linear regression model serves as a starting point for understanding the relationship between resale prices and various structural and locational factors. It assumes that relationships between predictors (like area, age, proximity to amenities) and resale price are consistent across all geographic locations.\nWe’ll be converting flat_model into a factor will automatically treat each category as a separate level in the model without needing one-hot encoding.\n\n# Convert `flat_type`, `region` and `flat_model` to factors\nresale_final &lt;- resale_final %&gt;%\n  mutate(flat_type = as.factor(flat_type),\n         region = as.factor(region),\n         flat_model = as.factor(flat_model))\n\nThe code chunk below using lm() to calibrate the multiple linear regression model.\n\nresale_mlr &lt;- lm(formula = resale_price ~ \n                 floor_area_sqm + \n                 storey_avg + \n                 remaining_lease_total_mths + \n                 proximity_to_mrt + \n                 proximity_to_goodprisch + \n                 within_1km_prisch + \n                 proximity_to_eldercare + \n                 proximity_to_CHAS + \n                 proximity_to_spmrkt + \n                 proximity_to_hawker + \n                 proximity_to_parks + \n                 proximity_to_childcare + \n                 within_350m_childcare + \n                 proximity_to_busstop + \n                 within_350m_busstop + \n                 proximity_to_mall + \n                 flat_type + \n                 region + \n                 flat_model,  # Assuming 'flat_type', 'region'                  , and 'flat_model' are factors\n                 data = resale_final)\n\n\nwrite_rds(resale_mlr, \"data/HDB/rds/resale_mlr.rds\")\n\n\nresale_mlr &lt;- read_rds(\"data/HDB/rds/resale_mlr.rds\")\n\n\n\n5.2 Preparing Publication Quality Table: olsrr method\nWith reference to the report above, it is clear that not all the independent variables are statistically significant. We will revised the model by removing those variables which are not statistically significant.\nNow, we are ready to calibrate the revised model by using the code chunk below.\n\nols_regress(resale_mlr)\n\n                              Model Summary                                \n--------------------------------------------------------------------------\nR                           0.916       RMSE                    64519.442 \nR-Squared                   0.839       MSE                4169484825.877 \nAdj. R-Squared              0.839       Coef. Var                  11.475 \nPred R-Squared              0.838       AIC                    588654.342 \nMAE                     47856.606       SBC                    588968.959 \n--------------------------------------------------------------------------\n RMSE: Root Mean Square Error \n MSE: Mean Square Error \n MAE: Mean Absolute Error \n AIC: Akaike Information Criteria \n SBC: Schwarz Bayesian Criteria \n\n                                     ANOVA                                       \n--------------------------------------------------------------------------------\n                    Sum of                                                      \n                   Squares           DF       Mean Square       F          Sig. \n--------------------------------------------------------------------------------\nRegression    5.102031e+14           37      1.378927e+13    3307.189    0.0000 \nResidual      9.805377e+13        23517    4169484825.877                       \nTotal         6.082569e+14        23554                                         \n--------------------------------------------------------------------------------\n\n                                                     Parameter Estimates                                                       \n------------------------------------------------------------------------------------------------------------------------------\n                           model           Beta    Std. Error    Std. Beta       t         Sig           lower          upper \n------------------------------------------------------------------------------------------------------------------------------\n                     (Intercept)    -212949.177     16847.847                  -12.640    0.000    -245972.049    -179926.305 \n                  floor_area_sqm       5180.848        90.734        0.614      57.100    0.000       5003.004       5358.691 \n                      storey_avg       5839.961        76.681        0.221      76.159    0.000       5689.661       5990.260 \n      remaining_lease_total_mths        443.262         4.076        0.506     108.755    0.000        435.273        451.251 \n                proximity_to_mrt     -24106.048      1255.627       -0.055     -19.198    0.000     -26567.159     -21644.938 \n         proximity_to_goodprisch      -6768.217       497.990       -0.054     -13.591    0.000      -7744.309      -5792.125 \n               within_1km_prisch       7761.181      1316.564        0.020       5.895    0.000       5180.630      10341.732 \n          proximity_to_eldercare      -8762.624       767.591       -0.034     -11.416    0.000     -10267.152      -7258.096 \n               proximity_to_CHAS       4755.351      4397.039        0.003       1.081    0.279      -3863.132      13373.833 \n             proximity_to_spmrkt     -16311.321      2928.008       -0.017      -5.571    0.000     -22050.407     -10572.236 \n             proximity_to_hawker     -26553.249       988.416       -0.085     -26.864    0.000     -28490.607     -24615.890 \n              proximity_to_parks     -26393.337      1287.289       -0.062     -20.503    0.000     -28916.507     -23870.166 \n          proximity_to_childcare      10947.090      5155.185        0.006       2.124    0.034        842.594      21051.586 \n           within_350m_childcare      -2681.812       243.666       -0.033     -11.006    0.000      -3159.413      -2204.210 \n            proximity_to_busstop      22861.952      8273.740        0.008       2.763    0.006       6644.885      39079.020 \n             within_350m_busstop        406.545       169.873        0.007       2.393    0.017         73.583        739.507 \n               proximity_to_mall      -9397.458      1407.183       -0.021      -6.678    0.000     -12155.628      -6639.287 \n                 flat_type4 ROOM       3494.984      2647.682        0.011       1.320    0.187      -1694.645       8684.613 \n                 flat_type5 ROOM      13686.820      5222.222        0.037       2.621    0.009       3450.927      23922.714 \n                      regionEast    -107451.956      1723.780       -0.230     -62.335    0.000    -110830.678    -104073.235 \n                     regionNorth    -193077.423      1848.693       -0.468    -104.440    0.000    -196700.982    -189453.864 \n                regionNorth-East    -156387.441      1668.560       -0.433     -93.726    0.000    -159657.926    -153116.955 \n                      regionWest    -157204.041      1668.027       -0.409     -94.246    0.000    -160473.482    -153934.601 \n         flat_modelAdjoined flat     105692.643     18885.149        0.022       5.597    0.000      68676.526     142708.760 \n                  flat_modelDBSS     191297.003     14661.522        0.133      13.048    0.000     162559.470     220034.537 \n              flat_modelImproved      33241.758     14189.024        0.090       2.343    0.019       5430.350      61053.165 \n   flat_modelImproved-Maisonette     176551.841     32212.926        0.016       5.481    0.000     113412.417     239691.265 \n               flat_modelModel A      39401.864     14203.221        0.121       2.774    0.006      11562.629      67241.098 \n    flat_modelModel A-Maisonette     149003.432     17590.334        0.038       8.471    0.000     114525.236     183481.628 \n              flat_modelModel A2      44323.883     14751.886        0.030       3.005    0.003      15409.230      73238.536 \n        flat_modelNew Generation      91881.327     14276.932        0.191       6.436    0.000      63897.614     119865.040 \n     flat_modelPremium Apartment      36270.736     14226.036        0.069       2.550    0.011       8386.784      64154.689 \nflat_modelPremium Apartment Loft     289691.450     24927.185        0.037      11.622    0.000     240832.552     338550.349 \n            flat_modelSimplified     102307.694     14430.332        0.125       7.090    0.000      74023.306     130592.082 \n              flat_modelStandard      31229.077     14538.977        0.030       2.148    0.032       2731.738      59726.416 \n               flat_modelTerrace     406349.619     28478.697        0.044      14.269    0.000     350529.526     462169.711 \n               flat_modelType S1     351164.338     17838.349        0.087      19.686    0.000     316200.018     386128.659 \n               flat_modelType S2     458875.210     24164.316        0.062      18.990    0.000     411511.584     506238.836 \n------------------------------------------------------------------------------------------------------------------------------\n\n\n\n\n5.3 Preparing Publication Quality Table: gtsummary method\nThe gtsummary package provides an elegant and flexible way to create publication-ready summary tables in R.\nIn the code chunk below, tbl_regression() is used to create a well formatted regression report.\n\ntbl_regression(resale_mlr, intercept = TRUE)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCharacteristic\nBeta\n95% CI1\np-value\n\n\n\n\n(Intercept)\n-212,949\n-245,972, -179,926\n&lt;0.001\n\n\nfloor_area_sqm\n5,181\n5,003, 5,359\n&lt;0.001\n\n\nstorey_avg\n5,840\n5,690, 5,990\n&lt;0.001\n\n\nremaining_lease_total_mths\n443\n435, 451\n&lt;0.001\n\n\nproximity_to_mrt\n-24,106\n-26,567, -21,645\n&lt;0.001\n\n\nproximity_to_goodprisch\n-6,768\n-7,744, -5,792\n&lt;0.001\n\n\nwithin_1km_prisch\n7,761\n5,181, 10,342\n&lt;0.001\n\n\nproximity_to_eldercare\n-8,763\n-10,267, -7,258\n&lt;0.001\n\n\nproximity_to_CHAS\n4,755\n-3,863, 13,374\n0.3\n\n\nproximity_to_spmrkt\n-16,311\n-22,050, -10,572\n&lt;0.001\n\n\nproximity_to_hawker\n-26,553\n-28,491, -24,616\n&lt;0.001\n\n\nproximity_to_parks\n-26,393\n-28,917, -23,870\n&lt;0.001\n\n\nproximity_to_childcare\n10,947\n843, 21,052\n0.034\n\n\nwithin_350m_childcare\n-2,682\n-3,159, -2,204\n&lt;0.001\n\n\nproximity_to_busstop\n22,862\n6,645, 39,079\n0.006\n\n\nwithin_350m_busstop\n407\n74, 740\n0.017\n\n\nproximity_to_mall\n-9,397\n-12,156, -6,639\n&lt;0.001\n\n\nflat_type\n\n\n\n\n\n\n\n\n    3 ROOM\n—\n—\n\n\n\n\n    4 ROOM\n3,495\n-1,695, 8,685\n0.2\n\n\n    5 ROOM\n13,687\n3,451, 23,923\n0.009\n\n\nregion\n\n\n\n\n\n\n\n\n    Central\n—\n—\n\n\n\n\n    East\n-107,452\n-110,831, -104,073\n&lt;0.001\n\n\n    North\n-193,077\n-196,701, -189,454\n&lt;0.001\n\n\n    North-East\n-156,387\n-159,658, -153,117\n&lt;0.001\n\n\n    West\n-157,204\n-160,473, -153,935\n&lt;0.001\n\n\nflat_model\n\n\n\n\n\n\n\n\n    3Gen\n—\n—\n\n\n\n\n    Adjoined flat\n105,693\n68,677, 142,709\n&lt;0.001\n\n\n    DBSS\n191,297\n162,559, 220,035\n&lt;0.001\n\n\n    Improved\n33,242\n5,430, 61,053\n0.019\n\n\n    Improved-Maisonette\n176,552\n113,412, 239,691\n&lt;0.001\n\n\n    Model A\n39,402\n11,563, 67,241\n0.006\n\n\n    Model A-Maisonette\n149,003\n114,525, 183,482\n&lt;0.001\n\n\n    Model A2\n44,324\n15,409, 73,239\n0.003\n\n\n    New Generation\n91,881\n63,898, 119,865\n&lt;0.001\n\n\n    Premium Apartment\n36,271\n8,387, 64,155\n0.011\n\n\n    Premium Apartment Loft\n289,691\n240,833, 338,550\n&lt;0.001\n\n\n    Simplified\n102,308\n74,023, 130,592\n&lt;0.001\n\n\n    Standard\n31,229\n2,732, 59,726\n0.032\n\n\n    Terrace\n406,350\n350,530, 462,170\n&lt;0.001\n\n\n    Type S1\n351,164\n316,200, 386,129\n&lt;0.001\n\n\n    Type S2\n458,875\n411,512, 506,239\n&lt;0.001\n\n\n\n1 CI = Confidence Interval\n\n\n\n\n\n\n\n\n\n\n5.4 Key Insights:\nSeveral key insights about the fitted linear regression model:\n\nOverall Model Fit:\n\nThe model shows a strong fit, with an R-squared of 0.839 and an Adjusted R-squared of 0.8385, indicating that around 83.9% of the variance in resale prices is explained by the independent variables included in the model. This is a high R-squared value, suggesting the model is well-specified for predicting resale prices based on the available features.\nThe Residual Standard Error of 64,570 suggests that predictions deviate by about this much on average, which may indicate room for further refinement, particularly in capturing nuances in higher-priced or unique units.\n\nSignificance of Variables:\n\nMost predictors are statistically significant (p &lt; 0.05), as evidenced by the low p-values in the table. However, the expanded table includes 95% Confidence Intervals (CI) for each coefficient, allowing for an assessment of the precision of each estimate.\nFloor Area, Storey Average, and Remaining Lease are all highly significant predictors with narrow confidence intervals, confirming that they are reliable indicators of resale price.\n\nEffect of Regions:\n\nUsing the Central region as a baseline, we see that all other regions have negative coefficients. Specifically:\n\nEast: Resale prices are approximately SGD 107,452 lower than in the Central region, with a narrow confidence interval that confirms the precision of this estimate.\nNorth: Shows an even larger negative effect on resale prices, about SGD 193,077 lower than Central, suggesting that geographical proximity to Singapore’s urban core has a significant effect on property values.\nNorth-East and West: These regions also display a significant price discount relative to Central, likely due to accessibility and perceived amenities.\n\nThis strong regional variation emphasizes the importance of location in resale pricing, with Central commanding the highest premium.\n\nEffect of Flat Model:\n\nThe model uses 3Gen as the baseline flat model. Different flat models show substantial variation in pricing. For example:\n\nType S2 flats have a very high positive effect, with an estimated increase of approximately SGD 458,875 over the baseline, highlighting this model’s desirability or premium status.\nOther high-value models like DBSS (+SGD 191,297) and Improved-Maisonette (+SGD 176,552) indicate that certain layouts or schemes, possibly due to exclusivity or enhanced facilities, contribute significantly to price.\nIn contrast, Standard flats have a modest positive impact of around SGD 31,229, showing that standard flat types are valued less compared to other premium models.\n\nThe inclusion of these models as categorical variables helps capture the inherent structural and aesthetic differences among units.\n\nEffect of Proximity to Amenities:\n\nProximity measures to amenities like MRT stations, bus stops, and parks have notable effects on resale prices. For instance:\n\nProximity to MRT (-SGD 24,106): Being closer to an MRT station reduces the resale price, suggesting that noise or congestion associated with MRT stations could be perceived negatively by buyers.\nWithin 1km of Primary Schools (+SGD 7,761): This positively affects price, highlighting the appeal of accessible schooling for families.\nProximity to Parks (-SGD 26,393): Despite parks being a positive amenity, the negative coefficient suggests that there might be other factors at play, such as over-saturation in certain areas.\n\nThe expanded model’s confidence intervals reinforce the interpretation of these proximity variables, with most intervals not overlapping zero, which confirms their significance.\n\nEffects of Flat Types (3 ROOM, 4 ROOM, 5 ROOM):\n\nThe model treats 3 ROOM flats as the baseline. Compared to 3 ROOM flats:\n\n4 ROOM flats show a slight positive association with resale price, but the effect size (approximately SGD 3,495) is not statistically significant (p = 0.2), suggesting it does not differ much from the baseline in value.\n5 ROOM flats have a larger, statistically significant positive effect (+SGD 13,687), indicating higher demand or perceived value for these larger units.\n\n\nInterpretation of Confidence Intervals:\n\nThe inclusion of 95% confidence intervals for each predictor provides insight into the reliability of each estimate. For example:\n\nFor Floor Area, the CI ranges from SGD 5,003 to SGD 5,359 per sqm, showing a tight interval that suggests high reliability.\nFor categorical variables, such as regions and flat models, the confidence intervals further confirm the significant differences among categories, especially for high-impact variables like DBSS and Type S2 models.\n\n\nAdditional Model Diagnostics:\n\nRMSE (Root Mean Square Error) of 64,519 provides a sense of the average magnitude of residuals in the original resale price units. Given the price range, this suggests reasonable model accuracy but indicates room for fine-tuning.\nAIC and SBC values, also shown in the model summary, are used for model comparison. Lower values indicate better model performance in terms of fit and complexity. These metrics might be useful if comparing against alternative models or specifications.\n\n\n\n\n\n\n\n\nSummary\n\n\n\nThis model successfully captures significant predictors of resale price, with clear regional and flat model effects, as well as a nuanced understanding of how proximity to amenities affects valuation. The high R-squared value and statistically significant predictors underscore the robustness of this model."
  }
]